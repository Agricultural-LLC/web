---
const firebaseConfig = {
  apiKey: import.meta.env.PUBLIC_FIREBASE_API_KEY,
  authDomain: import.meta.env.PUBLIC_FIREBASE_AUTH_DOMAIN,
  databaseURL: import.meta.env.PUBLIC_FIREBASE_DATABASE_URL,
  projectId: import.meta.env.PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: import.meta.env.PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: import.meta.env.PUBLIC_FIREBASE_APP_ID
};

if (!firebaseConfig.apiKey || !firebaseConfig.authDomain) {
  console.error("Firebase configuration is incomplete. Please set environment variables.");
}
---
<!DOCTYPE html>
<html lang="ja" data-theme="light">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>„Éã„É•„Éº„ÇπË®ò‰∫ãÁ∑®ÈõÜ - Ëæ≤Ê•≠ÂêàÂêå‰ºöÁ§æ CMS</title>
  <meta name="description" content="„Éã„É•„Éº„ÇπË®ò‰∫ã„ÅÆÁ∑®ÈõÜÁîªÈù¢" />
  <meta name="robots" content="noindex, nofollow" />

  <script define:vars={{ firebaseConfig }}>
    window.firebaseConfig = firebaseConfig;
  </script>

  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.css">

  <style>
    body {
      font-family: 'Hiragino Kaku Gothic ProN', 'Hiragino Sans', Meiryo, sans-serif;
      background-color: #f8fafc;
    }

    .form-section {
      background: white;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      margin-bottom: 24px;
    }

    .CodeMirror, .editor-preview {
      font-family: 'Hiragino Kaku Gothic ProN', 'Hiragino Sans', Meiryo, monospace;
      font-size: 14px;
      line-height: 1.5;
    }

    .editor-toolbar {
      border-top: none;
      border-left: none;
      border-right: none;
    }

    .editor-container {
      min-height: 600px;
    }

    .editor-preview h1, .editor-preview h2, .editor-preview h3 {
      color: #333;
      border-bottom: 1px solid #eee;
      padding-bottom: 8px;
    }

    .editor-preview p {
      margin-bottom: 1em;
      line-height: 1.6;
    }

    .editor-preview code {
      background: #f0f0f0;
      padding: 2px 4px;
      border-radius: 3px;
    }

    .editor-preview pre {
      background: #f8f8f8;
      padding: 12px;
      border-radius: 6px;
      overflow-x: auto;
    }

    .toast-container {
      position: fixed;
      top: 80px;
      right: 20px;
      z-index: 99999;
      max-width: 400px;
      width: 100%;
      pointer-events: none;
    }

    .toast {
      background: rgba(255, 255, 255, 0.98);
      backdrop-filter: blur(10px);
      border-radius: 8px;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15), 0 0 0 1px rgba(0, 0, 0, 0.08);
      margin-bottom: 16px;
      padding: 16px 20px;
      display: flex;
      align-items: center;
      transform: translateX(100%);
      opacity: 0;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      border-left: 4px solid #ddd;
      pointer-events: auto;
      min-width: 320px;
    }

    .toast.show {
      transform: translateX(0);
      opacity: 1;
    }

    .toast.success { border-left-color: #10b981; }
    .toast.error { border-left-color: #f56565; }
    .toast.info { border-left-color: #3b82f6; }
    .toast.warning { border-left-color: #f59e0b; }

    .toast-icon {
      flex-shrink: 0;
      width: 24px;
      height: 24px;
      margin-right: 12px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 14px;
      font-weight: bold;
      color: white;
    }

    .toast.success .toast-icon { background-color: #10b981; }
    .toast.error .toast-icon { background-color: #f56565; }
    .toast.info .toast-icon { background-color: #3b82f6; }
    .toast.warning .toast-icon { background-color: #f59e0b; }

    .toast-content { flex: 1; }

    .toast-title {
      font-weight: 600;
      color: #1f2937;
      margin-bottom: 4px;
    }

    .toast-message {
      color: #6b7280;
      font-size: 14px;
      line-height: 1.4;
    }

    .toast-close {
      background: none;
      border: none;
      color: #9ca3af;
      cursor: pointer;
      padding: 4px;
      margin-left: 8px;
      flex-shrink: 0;
    }

    .toast-close:hover { color: #6b7280; }

    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.3);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 10000;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
    }

    .loading-overlay.show {
      opacity: 1;
      visibility: visible;
    }

    .loading-spinner {
      background: white;
      padding: 24px;
      border-radius: 8px;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
      display: flex;
      align-items: center;
      gap: 16px;
    }

    .spinner {
      width: 24px;
      height: 24px;
      border: 3px solid #e5e7eb;
      border-top: 3px solid #3b82f6;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .CodeMirror.drag-over {
      border: 2px dashed #3b82f6 !important;
      background-color: rgba(59, 130, 246, 0.05) !important;
      transition: all 0.2s ease;
    }

    .editor-container::after {
      content: "üí° „Éí„É≥„ÉàÔºöÁîªÂÉè„Çí„Ç®„Éá„Ç£„Çø„Å´Áõ¥Êé•„Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„Éó„Åß„Åç„Åæ„Åô„ÄÇ";
      display: block;
      margin-top: 12px;
      font-size: 12px;
      color: #6b7280;
      text-align: center;
    }
  </style>
</head>
<body>
  <div id="toast-container" class="toast-container"></div>

  <div id="loading-overlay" class="loading-overlay">
    <div class="loading-spinner">
      <div class="spinner"></div>
      <span id="loading-text">Âá¶ÁêÜ‰∏≠...</span>
    </div>
  </div>

  <div id="app">
    <header class="bg-white shadow-sm">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center h-16">
          <div class="flex items-center">
            <a href="/admin/news/" class="text-purple-600 hover:text-purple-800 mr-4">
              ‚Üê „Éã„É•„Éº„Çπ‰∏ÄË¶ß
            </a>
            <h1 class="text-xl font-semibold text-gray-800" id="page-title">„Éã„É•„Éº„ÇπÁ∑®ÈõÜ</h1>
          </div>

          <div class="flex items-center space-x-4">
            <button id="save-draft-button" class="bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700 transition duration-200">
              ‰∏ãÊõ∏„Åç‰øùÂ≠ò
            </button>
            <button id="publish-button" class="bg-purple-600 text-white px-4 py-2 rounded-md hover:bg-purple-700 transition duration-200">
              ÂÖ¨Èñã
            </button>
            <span id="user-email" class="text-gray-600 text-sm"></span>
            <button id="logout-button" class="text-gray-600 hover:text-gray-800 text-sm px-3 py-2 rounded-md hover:bg-gray-100 transition duration-200">
              „É≠„Ç∞„Ç¢„Ç¶„Éà
            </button>
          </div>
        </div>
      </div>
    </header>

    <div id="loading" class="max-w-4xl mx-auto py-12 text-center">
      <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600"></div>
      <p class="mt-2 text-gray-600">Ë™≠„ÅøËæº„Åø‰∏≠...</p>
    </div>

    <main id="editor-content" class="hidden max-w-4xl mx-auto py-6 px-4">
      <form id="post-form">

        <div class="form-section">
          <div class="px-6 py-4 border-b border-gray-200">
            <h2 class="text-lg font-semibold text-gray-800">Âü∫Êú¨ÊÉÖÂ†±</h2>
          </div>
          <div class="p-6 space-y-6">
            <div>
              <label for="title" class="block text-sm font-medium text-gray-700 mb-2">
                „Çø„Ç§„Éà„É´ *
              </label>
              <input type="text" id="title" name="title" required
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                placeholder="„Éã„É•„Éº„Çπ„ÅÆ„Çø„Ç§„Éà„É´„ÇíÂÖ•Âäõ" />
            </div>

            <div>
              <label for="description" class="block text-sm font-medium text-gray-700 mb-2">
                Ë™¨Êòé *
              </label>
              <textarea id="description" name="description" rows="3" required
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                placeholder="„Éã„É•„Éº„Çπ„ÅÆË™¨Êòé„ÇíÂÖ•ÂäõÔºàSEOÁî®Ôºâ"></textarea>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label for="date" class="block text-sm font-medium text-gray-700 mb-2">
                  ÂÖ¨ÈñãÊó• *
                </label>
                <input type="date" id="date" name="date" required
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent" />
              </div>

              <div>
                <label for="image" class="block text-sm font-medium text-gray-700 mb-2">
                  „Éã„É•„Éº„ÇπÁîªÂÉè
                </label>

                <div id="image-upload-area" class="space-y-4">
                  <div id="upload-dropzone"
                    class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center cursor-pointer hover:border-gray-400 transition-colors">
                    <div id="upload-content">
                      <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                        <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                      </svg>
                      <p class="text-gray-600 mb-2">
                        <span class="font-medium text-purple-600 hover:text-purple-500">„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû</span>
                        „Åæ„Åü„ÅØ„Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„Éó
                      </p>
                      <p class="text-xs text-gray-500">PNG, JPG, GIF, WebP (ÊúÄÂ§ß5MB)</p>
                    </div>

                    <div id="upload-progress" class="hidden space-y-2">
                      <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600 mx-auto"></div>
                      <div class="w-full bg-gray-200 rounded-full h-2">
                        <div id="progress-bar" class="bg-purple-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                      </div>
                      <p class="text-sm text-gray-600">„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ‰∏≠...</p>
                    </div>
                  </div>

                  <div id="image-preview" class="hidden space-y-3">
                    <div class="relative inline-block">
                      <img id="preview-image" src="" alt="„Éó„É¨„Éì„É•„Éº" class="max-w-full h-auto max-h-64 rounded-lg shadow-sm">
                      <button type="button" id="remove-image"
                        class="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600 transition-colors"
                        title="ÁîªÂÉè„ÇíÂâäÈô§">
                        <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                        </svg>
                      </button>
                    </div>
                    <div class="text-sm text-gray-600">
                      <p>‚úÖ „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂÆå‰∫Ü</p>
                    </div>
                  </div>

                  <div id="upload-error" class="hidden bg-red-50 border border-red-200 rounded-md p-3">
                    <div class="flex">
                      <div class="flex-shrink-0">
                        <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
                        </svg>
                      </div>
                      <div class="ml-3">
                        <p id="error-text" class="text-sm text-red-700"></p>
                      </div>
                    </div>
                  </div>
                </div>

                <input type="hidden" id="image" name="image" />
              </div>
            </div>
          </div>
        </div>

        <div class="form-section">
          <div class="px-6 py-4 border-b border-gray-200">
            <h2 class="text-lg font-semibold text-gray-800">„Éã„É•„Éº„ÇπË®≠ÂÆö</h2>
          </div>
          <div class="p-6 space-y-6">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label for="priority" class="block text-sm font-medium text-gray-700 mb-2">
                  ÂÑ™ÂÖàÂ∫¶
                </label>
                <input type="number" id="priority" name="priority" min="0" max="10" value="0"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent" />
                <p class="mt-1 text-xs text-gray-500">Êï∞ÂÄ§„ÅåÂ§ß„Åç„ÅÑ„Åª„Å©‰∏ä‰Ωç„Å´Ë°®Á§∫„Åï„Çå„Åæ„ÅôÔºà0-10Ôºâ</p>
              </div>

              <div>
                <label for="source" class="block text-sm font-medium text-gray-700 mb-2">
                  „Éã„É•„Éº„Çπ„ÇΩ„Éº„Çπ
                </label>
                <select id="source" name="source"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                  <option value="">„ÇΩ„Éº„Çπ„ÇíÈÅ∏Êäû</option>
                  <option value="Ëæ≤Ê•≠ÂêàÂêå‰ºöÁ§æ">Ëæ≤Ê•≠ÂêàÂêå‰ºöÁ§æ</option>
                  <option value="Ê•≠Áïå„É°„Éá„Ç£„Ç¢">Ê•≠Áïå„É°„Éá„Ç£„Ç¢</option>
                  <option value="ÊîøÂ∫úÁô∫Ë°®">ÊîøÂ∫úÁô∫Ë°®</option>
                  <option value="JAÁô∫Ë°®">JAÁô∫Ë°®</option>
                  <option value="„Åù„ÅÆ‰ªñ">„Åù„ÅÆ‰ªñ</option>
                </select>
              </div>
            </div>

            <div>
              <label for="externalLink" class="block text-sm font-medium text-gray-700 mb-2">
                Â§ñÈÉ®„É™„É≥„ÇØ
              </label>
              <input type="url" id="externalLink" name="externalLink"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                placeholder="https://example.com" />
              <p class="mt-1 text-xs text-gray-500">Â§ñÈÉ®„ÅÆ„Éã„É•„Éº„Çπ„ÇΩ„Éº„Çπ„Å∏„ÅÆ„É™„É≥„ÇØÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ</p>
            </div>

            <div class="flex items-center">
              <input type="checkbox" id="featured" name="featured"
                class="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded" />
              <label for="featured" class="ml-2 block text-sm text-gray-700">
                ÁâπÈõÜË®ò‰∫ã„Å®„Åó„Å¶Ë°®Á§∫
              </label>
            </div>
          </div>
        </div>

        <div class="form-section">
          <div class="px-6 py-4 border-b border-gray-200">
            <h2 class="text-lg font-semibold text-gray-800">„É°„Çø„Éá„Éº„Çø</h2>
          </div>
          <div class="p-6 space-y-6">
            <div>
              <label for="authors" class="block text-sm font-medium text-gray-700 mb-2">
                ËëóËÄÖ *
              </label>
              <input type="text" id="authors" name="authors" value="admin" required
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                placeholder="admin" />
              <p class="mt-1 text-xs text-gray-500">Ë§áÊï∞„ÅÆÂ†¥Âêà„ÅØ„Ç´„É≥„ÉûÂå∫Âàá„Çä</p>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label for="categories" class="block text-sm font-medium text-gray-700 mb-2">
                  „Ç´„ÉÜ„Ç¥„É™„Éº *
                </label>
                <select id="categories" name="categories" multiple required
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                  <option value="„Éó„É¨„Çπ„É™„É™„Éº„Çπ">„Éó„É¨„Çπ„É™„É™„Éº„Çπ</option>
                  <option value="„Ç§„Éô„É≥„ÉàÊÉÖÂ†±">„Ç§„Éô„É≥„ÉàÊÉÖÂ†±</option>
                  <option value="Ê•≠Áïå„Éã„É•„Éº„Çπ">Ê•≠Áïå„Éã„É•„Éº„Çπ</option>
                  <option value="„ÅäÁü•„Çâ„Åõ">„ÅäÁü•„Çâ„Åõ</option>
                  <option value="Êé°Áî®ÊÉÖÂ†±">Êé°Áî®ÊÉÖÂ†±</option>
                  <option value="„Çµ„Éº„Éì„ÇπÊõ¥Êñ∞">„Çµ„Éº„Éì„ÇπÊõ¥Êñ∞</option>
                </select>
                <p class="mt-1 text-xs text-gray-500">Ctrl„Ç≠„Éº„ÇíÊäº„Åó„Å™„Åå„ÇâË§áÊï∞ÈÅ∏ÊäûÂèØ</p>
              </div>

              <div>
                <label for="tags" class="block text-sm font-medium text-gray-700 mb-2">
                  „Çø„Ç∞
                </label>
                <input type="text" id="tags" name="tags"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  placeholder="„Çπ„Éû„Éº„ÉàËæ≤Ê•≠, IoT, „Éâ„É≠„Éº„É≥" />
                <p class="mt-1 text-xs text-gray-500">„Ç´„É≥„ÉûÂå∫Âàá„Çä„ÅßÂÖ•Âäõ</p>
              </div>
            </div>

            <div class="mt-6">
              <div class="flex items-center">
                <input type="checkbox" id="draft" name="draft"
                  class="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded" />
                <label for="draft" class="ml-2 block text-sm text-gray-700">
                  ‰∏ãÊõ∏„Åç„Å®„Åó„Å¶‰øùÂ≠òÔºàÂÖ¨Èñã„Åó„Å™„ÅÑÔºâ
                </label>
              </div>
              <p class="mt-1 text-xs text-gray-500">„ÉÅ„Çß„ÉÉ„ÇØ„ÇíÂ§ñ„Åô„Å®„Éã„É•„Éº„Çπ„ÅåÂÖ¨Èñã„Åï„Çå„Åæ„Åô</p>
            </div>
          </div>
        </div>

        <div class="form-section">
          <div class="px-6 py-4 border-b border-gray-200">
            <h2 class="text-lg font-semibold text-gray-800">Êú¨Êñá</h2>
          </div>
          <div class="p-6 editor-container">
            <textarea id="markdown-editor" style="min-height: 500px;"></textarea>
          </div>
        </div>

      </form>
    </main>
  </div>

  <script src="https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.js"></script>

  <script type="module">
    import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js';
    import { getAuth, onAuthStateChanged, signOut } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-auth.js';
    import { getDatabase, ref, set, get, update, push } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-database.js';
    import { getStorage, ref as storageRef, uploadBytes, getDownloadURL, uploadBytesResumable } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-storage.js';

    if (!window.firebaseConfig) {
      console.error('Firebase config not available');
      document.body.innerHTML = '<div style="padding: 2rem; text-align: center; color: red;">FirebaseË®≠ÂÆö„Ç®„É©„Éº</div>';
      throw new Error('Firebase config not loaded');
    }

    const config = window.firebaseConfig;
    const app = initializeApp(config);
    const auth = getAuth(app);
    const database = getDatabase(app, config.databaseURL);
    const storage = getStorage(app);

    let currentPostId = null;
    let simpleMDE = null;

    const loading = document.getElementById('loading');
    const editorContent = document.getElementById('editor-content');
    const pageTitle = document.getElementById('page-title');
    const userEmail = document.getElementById('user-email');
    const logoutButton = document.getElementById('logout-button');
    const saveDraftButton = document.getElementById('save-draft-button');
    const publishButton = document.getElementById('publish-button');
    const toastContainer = document.getElementById('toast-container');
    const loadingOverlay = document.getElementById('loading-overlay');
    const loadingText = document.getElementById('loading-text');

    const titleInput = document.getElementById('title');
    const descriptionInput = document.getElementById('description');
    const dateInput = document.getElementById('date');
    const imageInput = document.getElementById('image');
    const authorsInput = document.getElementById('authors');
    const categoriesSelect = document.getElementById('categories');
    const tagsInput = document.getElementById('tags');
    const draftCheckbox = document.getElementById('draft');

    const priorityInput = document.getElementById('priority');
    const featuredCheckbox = document.getElementById('featured');
    const externalLinkInput = document.getElementById('externalLink');
    const sourceSelect = document.getElementById('source');

    const uploadDropzone = document.getElementById('upload-dropzone');
    const uploadContent = document.getElementById('upload-content');
    const uploadProgress = document.getElementById('upload-progress');
    const progressBar = document.getElementById('progress-bar');
    const imagePreview = document.getElementById('image-preview');
    const previewImage = document.getElementById('preview-image');
    const removeImageBtn = document.getElementById('remove-image');
    const uploadError = document.getElementById('upload-error');
    const errorText = document.getElementById('error-text');

    onAuthStateChanged(auth, (user) => {
      if (!user) {
        window.location.href = '/admin/';
        return;
      }

      // Verify user has proper permissions - whitelist only
      const allowedEmails = [
        'shindoy@gmail.com',
        'yohei.fujii.eg@gmail.com',
        'company@cor-jp.com'
      ];

      if (!allowedEmails.includes(user.email)) {
        alert('Ê®©Èôê„Ç®„É©„Éº: ÁÆ°ÁêÜËÄÖÊ®©Èôê„ÅåÂøÖË¶Å„Åß„Åô');
        window.location.href = '/admin/';
        return;
      }

      userEmail.textContent = user.email;
      initializeEditor();
      initializeImageUpload();
    });

    function initializeEditor() {
      const today = new Date().toISOString().split('T')[0];
      dateInput.value = today;

      const urlParams = new URLSearchParams(window.location.search);
      currentPostId = urlParams.get('id');

      if (currentPostId) {
        pageTitle.textContent = '„Éã„É•„Éº„ÇπÁ∑®ÈõÜ';
        loadPost(currentPostId);
      } else {
        pageTitle.textContent = 'Êñ∞Ë¶è„Éã„É•„Éº„Çπ‰ΩúÊàê';
        showEditor();
      }
    }

    async function loadPost(postId) {
      try {
        showInfo('Ë™≠„ÅøËæº„Åø‰∏≠', '„Éã„É•„Éº„Çπ„Éá„Éº„Çø„ÇíÂèñÂæó„Åó„Å¶„ÅÑ„Åæ„Åô...');

        const postRef = ref(database, `cms/news/${postId}`);
        const snapshot = await get(postRef);

        if (snapshot.exists()) {
          const post = snapshot.val();
          populateForm(post);
          showEditor();
          showSuccess('Ë™≠„ÅøËæº„ÅøÂÆå‰∫Ü', `„Éã„É•„Éº„Çπ„Äå${post.title}„Äç„ÇíË™≠„ÅøËæº„Åø„Åæ„Åó„Åü`);
        } else {
          showError('„Ç®„É©„Éº', 'ÊåáÂÆö„Åï„Çå„Åü„Éã„É•„Éº„Çπ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
        }
      } catch (error) {
        console.error('Error loading post:', error);
        showError('Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº', `„Éã„É•„Éº„Çπ„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message}`);
      }
    }

    function populateForm(post) {
      titleInput.value = post.title || '';
      descriptionInput.value = post.description || '';
      dateInput.value = post.date || '';
      imageInput.value = post.image || '';
      authorsInput.value = Array.isArray(post.authors) ? post.authors.join(', ') : post.authors || 'admin';
      tagsInput.value = Array.isArray(post.tags) ? post.tags.join(', ') : post.tags || '';

      priorityInput.value = post.priority || 0;
      featuredCheckbox.checked = post.featured || false;
      externalLinkInput.value = post.externalLink || '';
      sourceSelect.value = post.source || '';
      draftCheckbox.checked = post.draft === true;

      if (Array.isArray(post.categories)) {
        Array.from(categoriesSelect.options).forEach(option => {
          option.selected = post.categories.includes(option.value);
        });
      }

      if (post.image && post.image.trim()) {
        showImagePreview(post.image);
      }

      window.pendingPostBody = post.body || '';
    }

    function showEditor() {
      loading.classList.add('hidden');
      editorContent.classList.remove('hidden');

      if (window.SimpleMDE && !simpleMDE) {
        const initialValue = window.pendingPostBody || '';
        const textarea = document.getElementById('markdown-editor');
        textarea.value = initialValue;

        simpleMDE = new SimpleMDE({
          element: textarea,
          initialValue: initialValue,
          spellChecker: false,
          status: ['autosave', 'lines', 'words', 'cursor'],
          toolbar: [
            'bold', 'italic', 'heading', '|',
            'quote', 'unordered-list', 'ordered-list', '|',
            'link', 'image', '|',
            'preview', 'fullscreen', '|',
            'guide'
          ],
          shortcuts: {
            togglePreview: 'Ctrl-P',
            toggleFullScreen: 'F11'
          }
        });

        setTimeout(() => {
          if (simpleMDE) {
            setupEditorDragDrop();
          }
        }, 500);

        window.pendingPostBody = null;
      }
    }

    logoutButton.addEventListener('click', () => {
      signOut(auth);
    });

    saveDraftButton.addEventListener('click', () => {
      savePost(true);
    });

    publishButton.addEventListener('click', () => {
      savePost(false);
    });

    async function savePost(isDraft) {
      showLoading(isDraft ? '‰∏ãÊõ∏„Åç„Çí‰øùÂ≠ò„Åó„Å¶„ÅÑ„Åæ„Åô...' : '„Éã„É•„Éº„Çπ„ÇíÂÖ¨Èñã„Åó„Å¶„ÅÑ„Åæ„Åô...');

      try {
        const formData = getFormData();
        formData.draft = isDraft;

        if (!validateForm(formData)) {
          hideLoading();
          return;
        }

        const postData = {
          ...formData,
          updatedAt: new Date().toISOString(),
          views: formData.views || 0
        };

        if (!isDraft) {
          postData.publishedAt = postData.publishedAt || new Date().toISOString();
        }

        let operationResult;

        if (currentPostId) {
          showInfo('Êõ¥Êñ∞‰∏≠', '„Éã„É•„Éº„Çπ„Éá„Éº„Çø„ÇíÊõ¥Êñ∞„Åó„Å¶„ÅÑ„Åæ„Åô...');
          await update(ref(database, `cms/news/${currentPostId}`), postData);
          operationResult = {
            type: 'update',
            isDraft,
            title: formData.title
          };
        } else {
          showInfo('‰ΩúÊàê‰∏≠', 'Êñ∞„Åó„ÅÑ„Éã„É•„Éº„Çπ„Çí‰ΩúÊàê„Åó„Å¶„ÅÑ„Åæ„Åô...');
          postData.createdAt = new Date().toISOString();
          postData.slug = generateSlug(formData.title);
          postData.views = 0;

          const newPostRef = push(ref(database, 'cms/news'));
          await set(newPostRef, postData);

          currentPostId = newPostRef.key;
          const newUrl = new URL(window.location.href);
          newUrl.searchParams.set('id', currentPostId);
          history.replaceState({}, '', newUrl);

          pageTitle.textContent = '„Éã„É•„Éº„ÇπÁ∑®ÈõÜ';
          operationResult = {
            type: 'create',
            isDraft,
            title: formData.title,
            slug: postData.slug
          };
        }

        hideLoading();

        const actionText = operationResult.type === 'create' ? '‰ΩúÊàê' : 'Êõ¥Êñ∞';
        const statusText = operationResult.isDraft ? '‰∏ãÊõ∏„Åç‰øùÂ≠ò' : 'ÂÖ¨Èñã';
        const title = `${actionText}ÂÆå‰∫Ü`;
        let message = `„Éã„É•„Éº„Çπ„Äå${operationResult.title}„Äç„Åå${statusText}„Åï„Çå„Åæ„Åó„Åü„ÄÇ`;

        showSuccess(title, message);

        if (!operationResult.isDraft) {
          setTimeout(() => {
            showInfo('ÂÖ¨ÈñãÂÆå‰∫Ü', '„Éã„É•„Éº„Çπ„Åå„Çµ„Ç§„Éà„Å´ÂèçÊò†„Åï„Çå„Åæ„Åó„Åü„ÄÇ');
          }, 1000);
        }

      } catch (error) {
        console.error('Error saving post:', error);
        hideLoading();
        showError('‰øùÂ≠ò„Ç®„É©„Éº', `„Éã„É•„Éº„Çπ„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message}`);
      }
    }

    function getFormData() {
      const selectedCategories = Array.from(categoriesSelect.selectedOptions).map(option => option.value);
      const tagsArray = tagsInput.value.split(',').map(tag => tag.trim()).filter(tag => tag);
      const authorsArray = authorsInput.value.split(',').map(author => author.trim()).filter(author => author);

      return {
        title: titleInput.value.trim(),
        description: descriptionInput.value.trim(),
        date: dateInput.value,
        image: imageInput.value.trim(),
        authors: authorsArray.length > 0 ? authorsArray : ['admin'],
        categories: selectedCategories,
        tags: tagsArray,
        body: getMarkdownContent(),
        priority: parseInt(priorityInput.value) || 0,
        featured: featuredCheckbox.checked,
        externalLink: externalLinkInput.value.trim(),
        source: sourceSelect.value,
        draft: draftCheckbox.checked
      };
    }

    function getMarkdownContent() {
      if (simpleMDE) {
        return simpleMDE.value() || '';
      }
      const textarea = document.getElementById('markdown-editor');
      return textarea ? textarea.value : '';
    }

    function validateForm(data) {
      const errors = [];

      if (!data.title) errors.push('„Çø„Ç§„Éà„É´„ÅØÂøÖÈ†à„Åß„Åô');
      if (!data.description) errors.push('Ë™¨Êòé„ÅØÂøÖÈ†à„Åß„Åô');
      if (!data.date) errors.push('ÂÖ¨ÈñãÊó•„ÅØÂøÖÈ†à„Åß„Åô');
      if (!data.body) errors.push('Êú¨Êñá„ÅØÂøÖÈ†à„Åß„Åô');
      if (data.categories.length === 0) errors.push('„Ç´„ÉÜ„Ç¥„É™„Éº„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ');

      if (errors.length > 0) {
        showError('ÂÖ•Âäõ„Ç®„É©„Éº', errors.join('\n'));

        if (!data.title) titleInput.focus();
        else if (!data.description) descriptionInput.focus();
        else if (!data.date) dateInput.focus();
        else if (!data.body && simpleMDE) simpleMDE.codemirror.focus();
        else if (data.categories.length === 0) categoriesSelect.focus();

        return false;
      }

      return true;
    }

    function generateSlug(title) {
      return title
        .toLowerCase()
        .replace(/[^\w\s-]/g, '')
        .replace(/\s+/g, '-')
        .replace(/-+/g, '-')
        .trim();
    }

    function showToast(type, title, message, duration = 4000) {
      const toast = document.createElement('div');
      toast.className = `toast ${type}`;

      const icons = {
        success: '‚úì',
        error: '‚úó',
        info: 'i',
        warning: '!'
      };

      toast.innerHTML = `
        <div class="toast-icon">${icons[type] || 'i'}</div>
        <div class="toast-content">
          <div class="toast-title">${title}</div>
          <div class="toast-message">${message}</div>
        </div>
        <button class="toast-close" onclick="this.parentElement.remove()">
          <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
            <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>
          </svg>
        </button>
      `;

      toastContainer.appendChild(toast);

      setTimeout(() => {
        toast.classList.add('show');
      }, 10);

      setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => {
          if (toast.parentElement) {
            toast.remove();
          }
        }, 300);
      }, duration);

      return toast;
    }

    function showSuccess(title, message) {
      return showToast('success', title, message);
    }

    function showError(title, message) {
      return showToast('error', title, message);
    }

    function showInfo(title, message) {
      return showToast('info', title, message);
    }

    function showWarning(title, message) {
      return showToast('warning', title, message);
    }

    function showLoading(text = 'Âá¶ÁêÜ‰∏≠...') {
      loadingText.textContent = text;
      loadingOverlay.classList.add('show');
    }

    function hideLoading() {
      loadingOverlay.classList.remove('show');
    }

    function initializeImageUpload() {
      const fileInput = document.createElement('input');
      fileInput.type = 'file';
      fileInput.accept = 'image/*';
      fileInput.style.display = 'none';
      document.body.appendChild(fileInput);

      uploadDropzone.addEventListener('click', () => {
        if (!uploadProgress.classList.contains('hidden')) return;
        fileInput.click();
      });

      fileInput.addEventListener('change', (e) => {
        const files = e.target.files;
        if (files && files.length > 0) {
          handleFileUpload(files[0]);
        }
      });

      uploadDropzone.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadDropzone.classList.add('border-purple-400', 'bg-purple-50');
      });

      uploadDropzone.addEventListener('dragleave', (e) => {
        e.preventDefault();
        uploadDropzone.classList.remove('border-purple-400', 'bg-purple-50');
      });

      uploadDropzone.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadDropzone.classList.remove('border-purple-400', 'bg-purple-50');

        const files = e.dataTransfer.files;
        if (files && files.length > 0) {
          handleFileUpload(files[0]);
        }
      });

      removeImageBtn.addEventListener('click', () => {
        removeImage();
      });
    }

    async function handleFileUpload(file) {
      if (!file.type.startsWith('image/')) {
        showError('„Éï„Ç°„Ç§„É´„Ç®„É©„Éº', '„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åß„Åç„Çã„ÅÆ„ÅØÁîªÂÉè„Éï„Ç°„Ç§„É´„ÅÆ„Åø„Åß„Åô');
        return;
      }

      const maxSize = 5 * 1024 * 1024;
      if (file.size > maxSize) {
        showError('„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„Ç®„É©„Éº', `„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÅØ5MB‰ª•‰∏ã„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ`);
        return;
      }

      showInfo('„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÈñãÂßã', `${file.name} „Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶„ÅÑ„Åæ„Åô...`);

      try {
        uploadContent.classList.add('hidden');
        uploadProgress.classList.remove('hidden');
        uploadError.classList.add('hidden');

        const timestamp = Date.now();
        const randomString = Math.random().toString(36).substring(2);
        const fileExtension = file.name.split('.').pop();
        const fileName = `${timestamp}_${randomString}.${fileExtension}`;

        const fileRef = storageRef(storage, `news/${fileName}`);

        const uploadTask = uploadBytesResumable(fileRef, file, {
          contentType: file.type,
          customMetadata: {
            originalName: file.name,
            uploadedAt: new Date().toISOString()
          }
        });

        uploadTask.on('state_changed',
          (snapshot) => {
            const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
            progressBar.style.width = progress + '%';
          },
          (error) => {
            console.error('Upload error:', error);
            showError('„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Ç®„É©„Éº', `ÁîªÂÉè„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message}`);
            resetUploadUI();
          },
          async () => {
            try {
              const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);

              imageInput.value = downloadURL;

              showImagePreview(downloadURL);

              uploadContent.classList.remove('hidden');
              uploadProgress.classList.add('hidden');
              progressBar.style.width = '0%';

              showSuccess('„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂÆå‰∫Ü', `${file.name} „ÅåÊ≠£Â∏∏„Å´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åï„Çå„Åæ„Åó„Åü`);

            } catch (error) {
              console.error('Error getting download URL:', error);
              showError('URLÂèñÂæó„Ç®„É©„Éº', 'ÁîªÂÉèURL„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
              resetUploadUI();
            }
          }
        );

      } catch (error) {
        console.error('Upload error:', error);
        showError('„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Ç®„É©„Éº', `ÁîªÂÉè„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message}`);
        resetUploadUI();
      }
    }

    function showImagePreview(imageUrl) {
      previewImage.src = imageUrl;
      uploadDropzone.classList.add('hidden');
      imagePreview.classList.remove('hidden');
      uploadError.classList.add('hidden');
    }

    function removeImage() {
      imageInput.value = '';
      previewImage.src = '';
      imagePreview.classList.add('hidden');
      uploadDropzone.classList.remove('hidden');
      uploadError.classList.add('hidden');
      resetUploadUI();

      showInfo('ÁîªÂÉèÂâäÈô§', '„Éã„É•„Éº„ÇπÁîªÂÉè„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü');
    }

    function resetUploadUI() {
      uploadContent.classList.remove('hidden');
      uploadProgress.classList.add('hidden');
      progressBar.style.width = '0%';
      uploadError.classList.add('hidden');
    }

    function setupEditorDragDrop() {
      if (!simpleMDE || !simpleMDE.codemirror) return;

      const codemirror = simpleMDE.codemirror;
      const wrapper = codemirror.getWrapperElement();

      wrapper.addEventListener('dragover', (e) => {
        e.preventDefault();
        e.stopPropagation();
        wrapper.classList.add('drag-over');
      });

      wrapper.addEventListener('dragleave', (e) => {
        e.preventDefault();
        e.stopPropagation();
        wrapper.classList.remove('drag-over');
      });

      wrapper.addEventListener('drop', async (e) => {
        e.preventDefault();
        e.stopPropagation();
        wrapper.classList.remove('drag-over');

        const files = e.dataTransfer.files;
        if (files && files.length > 0) {
          const file = files[0];

          if (!file.type.startsWith('image/')) {
            showError('„Éï„Ç°„Ç§„É´„Ç®„É©„Éº', 'ÁîªÂÉè„Éï„Ç°„Ç§„É´„ÅÆ„Åø„Éâ„É≠„ÉÉ„Éó„Åß„Åç„Åæ„Åô');
            return;
          }

          try {
            showInfo('„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ‰∏≠', `${file.name} „Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶„ÅÑ„Åæ„Åô...`);
            const imageUrl = await uploadImageAndGetUrl(file);

            const cursor = codemirror.getCursor();
            const imageMarkdown = `![${file.name}](${imageUrl})`;
            codemirror.replaceRange(imageMarkdown, cursor);

            showSuccess('„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂÆå‰∫Ü', `ÁîªÂÉè„Åå„Ç®„Éá„Ç£„Çø„Å´ËøΩÂä†„Åï„Çå„Åæ„Åó„Åü`);
          } catch (error) {
            console.error('Image upload error:', error);
            showError('„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Ç®„É©„Éº', `ÁîªÂÉè„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message}`);
          }
        }
      });
    }

    async function uploadImageAndGetUrl(file) {
      const maxSize = 5 * 1024 * 1024;
      if (file.size > maxSize) {
        throw new Error(`„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÅØ5MB‰ª•‰∏ã„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ`);
      }

      const timestamp = Date.now();
      const randomString = Math.random().toString(36).substring(2);
      const fileExtension = file.name.split('.').pop();
      const fileName = `news/${timestamp}_${randomString}.${fileExtension}`;

      const fileRef = storageRef(storage, fileName);
      const snapshot = await uploadBytes(fileRef, file, {
        contentType: file.type,
        customMetadata: {
          originalName: file.name,
          uploadedAt: new Date().toISOString()
        }
      });

      const downloadURL = await getDownloadURL(snapshot.ref);
      return downloadURL;
    }

    // Cleanup on page unload to prevent memory leaks
    window.addEventListener('beforeunload', () => {
      if (simpleMDE) {
        simpleMDE.toTextArea();
        simpleMDE = null;
      }
    });

    // Additional cleanup on navigation
    document.addEventListener('visibilitychange', () => {
      if (document.hidden && simpleMDE) {
        // Save current content to localStorage as backup
        const content = simpleMDE.value();
        if (content && currentPostId) {
          localStorage.setItem(`news_draft_${currentPostId}`, content);
        }
      }
    });

  </script>
</body>
</html>