---
// Get Firebase configuration from environment variables with fallback values
const firebaseConfig = {
  apiKey: import.meta.env.PUBLIC_FIREBASE_API_KEY || "AIzaSyCkctZ3zzyHw0JEEf8w-wl_xVE-1lQLo7E",
  authDomain: import.meta.env.PUBLIC_FIREBASE_AUTH_DOMAIN || "agricultural-llc.firebaseapp.com",
  databaseURL: import.meta.env.PUBLIC_FIREBASE_DATABASE_URL || "https://agricultural-llc-default-rtdb.asia-southeast1.firebasedatabase.app",
  projectId: import.meta.env.PUBLIC_FIREBASE_PROJECT_ID || "agricultural-llc",
  storageBucket: import.meta.env.PUBLIC_FIREBASE_STORAGE_BUCKET || "agricultural-llc.firebasestorage.app",
  messagingSenderId: import.meta.env.PUBLIC_FIREBASE_MESSAGING_SENDER_ID || "293681935404",
  appId: import.meta.env.PUBLIC_FIREBASE_APP_ID || "1:293681935404:web:188089a29ff3da05490d89"
};
---
<!DOCTYPE html>
<html lang="ja" data-theme="light">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>„Éñ„É≠„Ç∞Ë®ò‰∫ãÁ∑®ÈõÜ - Ëæ≤Ê•≠ÂêàÂêå‰ºöÁ§æ CMS</title>
  <meta name="description" content="„Éñ„É≠„Ç∞Ë®ò‰∫ã„ÅÆÁ∑®ÈõÜÁîªÈù¢" />
  <meta name="robots" content="noindex, nofollow" />
  
  <!-- Firebase Configuration using inline script -->
  <script define:vars={{ firebaseConfig }}>
    // Make firebaseConfig globally available
    window.firebaseConfig = firebaseConfig;
    console.log('=== FIREBASE CONFIG DEBUG ===');
    console.log('firebaseConfig from define:vars:', firebaseConfig);
    console.log('Database URL:', firebaseConfig.databaseURL);
    console.log('===============================');
  </script>
  
  <!-- Tailwind CSS -->
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  
  <!-- SimpleMDE CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.css">
  
  <style>
    body {
      font-family: 'Hiragino Kaku Gothic ProN', 'Hiragino Sans', Meiryo, sans-serif;
      background-color: #f8fafc;
    }
    
    .form-section {
      background: white;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      margin-bottom: 24px;
    }
    
    .CodeMirror, .editor-preview {
      font-family: 'Hiragino Kaku Gothic ProN', 'Hiragino Sans', Meiryo, monospace;
      font-size: 14px;
      line-height: 1.5;
    }
    
    .editor-toolbar {
      border-top: none;
      border-left: none;
      border-right: none;
    }
    
    /* Editor layout improvements */
    
    /* Ensure the editor container has proper layout */
    .editor-container {
      min-height: 600px;
    }
    
    /* Make sure preview content is readable */
    .editor-preview h1, .editor-preview h2, .editor-preview h3 {
      color: #333;
      border-bottom: 1px solid #eee;
      padding-bottom: 8px;
    }
    
    .editor-preview p {
      margin-bottom: 1em;
      line-height: 1.6;
    }
    
    .editor-preview code {
      background: #f0f0f0;
      padding: 2px 4px;
      border-radius: 3px;
    }
    
    .editor-preview pre {
      background: #f8f8f8;
      padding: 12px;
      border-radius: 6px;
      overflow-x: auto;
    }
    
    /* Toast notification system */
    .toast-container {
      position: fixed;
      top: 80px;
      right: 20px;
      z-index: 99999;
      max-width: 400px;
      width: 100%;
      pointer-events: none;
    }
    
    .toast {
      background: rgba(255, 255, 255, 0.98);
      backdrop-filter: blur(10px);
      border-radius: 8px;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15), 0 0 0 1px rgba(0, 0, 0, 0.08);
      margin-bottom: 16px;
      padding: 16px 20px;
      display: flex;
      align-items: center;
      transform: translateX(100%);
      opacity: 0;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      border-left: 4px solid #ddd;
      pointer-events: auto;
      min-width: 320px;
    }
    
    .toast.show {
      transform: translateX(0);
      opacity: 1;
    }
    
    .toast.success {
      border-left-color: #10b981;
    }
    
    .toast.error {
      border-left-color: #f56565;
    }
    
    .toast.info {
      border-left-color: #3b82f6;
    }
    
    .toast.warning {
      border-left-color: #f59e0b;
    }
    
    .toast-icon {
      flex-shrink: 0;
      width: 24px;
      height: 24px;
      margin-right: 12px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 14px;
      font-weight: bold;
      color: white;
    }
    
    .toast.success .toast-icon {
      background-color: #10b981;
    }
    
    .toast.error .toast-icon {
      background-color: #f56565;
    }
    
    .toast.info .toast-icon {
      background-color: #3b82f6;
    }
    
    .toast.warning .toast-icon {
      background-color: #f59e0b;
    }
    
    .toast-content {
      flex: 1;
    }
    
    .toast-title {
      font-weight: 600;
      color: #1f2937;
      margin-bottom: 4px;
    }
    
    .toast-message {
      color: #6b7280;
      font-size: 14px;
      line-height: 1.4;
    }
    
    .toast-close {
      background: none;
      border: none;
      color: #9ca3af;
      cursor: pointer;
      padding: 4px;
      margin-left: 8px;
      flex-shrink: 0;
    }
    
    .toast-close:hover {
      color: #6b7280;
    }
    
    /* Loading overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.3);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 10000;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
    }
    
    .loading-overlay.show {
      opacity: 1;
      visibility: visible;
    }
    
    .loading-spinner {
      background: white;
      padding: 24px;
      border-radius: 8px;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
      display: flex;
      align-items: center;
      gap: 16px;
    }
    
    .spinner {
      width: 24px;
      height: 24px;
      border: 3px solid #e5e7eb;
      border-top: 3px solid #3b82f6;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    /* „Ç®„Éá„Ç£„ÇøÂÜÖ„Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„Éó„Çπ„Çø„Ç§„É´ */
    .CodeMirror.drag-over {
      border: 2px dashed #3b82f6 !important;
      background-color: rgba(59, 130, 246, 0.05) !important;
      transition: all 0.2s ease;
    }
    
    .CodeMirror.drag-over::before {
      content: "ÁîªÂÉè„Çí„Åì„Åì„Å´„Éâ„É≠„ÉÉ„Éó„Åó„Å¶„Åè„Å†„Åï„ÅÑ";
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(59, 130, 246, 0.9);
      color: white;
      padding: 12px 24px;
      border-radius: 8px;
      font-size: 14px;
      font-weight: 500;
      z-index: 1000;
      pointer-events: none;
    }
    
    /* „Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„Éó„Éí„É≥„Éà */
    .editor-container::after {
      content: "üí° „Éí„É≥„ÉàÔºöÁîªÂÉè„Çí„Ç®„Éá„Ç£„Çø„Å´Áõ¥Êé•„Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„Éó„Åß„Åç„Åæ„Åô„ÄÇ„É™„É≥„ÇØ„Ç´„Éº„Éâ„Éú„Çø„É≥„ÅßWeb„Çµ„Ç§„Éà„ÅÆ„Ç´„Éº„Éâ„ÇÇÊåøÂÖ•„Åß„Åç„Åæ„Åô„ÄÇ";
      display: block;
      margin-top: 12px;
      font-size: 12px;
      color: #6b7280;
      text-align: center;
    }
    
    /* URLÂÖ•Âäõ„ÉÄ„Ç§„Ç¢„É≠„Ç∞ */
    .url-dialog-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 10000;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
    }
    
    .url-dialog-overlay.show {
      opacity: 1;
      visibility: visible;
    }
    
    .url-dialog {
      background: white;
      border-radius: 12px;
      box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
      padding: 24px;
      max-width: 500px;
      width: 90%;
      transform: scale(0.95) translateY(20px);
      transition: all 0.3s ease;
    }
    
    .url-dialog-overlay.show .url-dialog {
      transform: scale(1) translateY(0);
    }
    
    .url-dialog h3 {
      font-size: 18px;
      font-weight: 600;
      color: #1f2937;
      margin-bottom: 8px;
    }
    
    .url-dialog p {
      color: #6b7280;
      font-size: 14px;
      margin-bottom: 20px;
    }
    
    .url-dialog input {
      width: 100%;
      padding: 12px 16px;
      border: 2px solid #e5e7eb;
      border-radius: 8px;
      font-size: 14px;
      transition: border-color 0.2s;
      margin-bottom: 20px;
    }
    
    .url-dialog input:focus {
      outline: none;
      border-color: #3b82f6;
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }
    
    .url-dialog .buttons {
      display: flex;
      gap: 12px;
      justify-content: flex-end;
    }
    
    .url-dialog .btn {
      padding: 10px 20px;
      border-radius: 8px;
      font-size: 14px;
      font-weight: 500;
      transition: all 0.2s;
      cursor: pointer;
      border: none;
    }
    
    .url-dialog .btn-secondary {
      background: #f3f4f6;
      color: #374151;
    }
    
    .url-dialog .btn-secondary:hover {
      background: #e5e7eb;
    }
    
    .url-dialog .btn-primary {
      background: #3b82f6;
      color: white;
    }
    
    .url-dialog .btn-primary:hover {
      background: #2563eb;
    }
    
    .url-dialog .btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
    
    /* „É™„É≥„ÇØ„Ç´„Éº„Éâ„Éó„É¨„Éì„É•„Éº„Çπ„Çø„Ç§„É´ */
    .link-card-preview {
      margin: 16px 0;
      max-width: 600px;
    }
    
    .link-card-link {
      display: block;
      border: 1px solid #e5e7eb;
      border-radius: 8px;
      overflow: hidden;
      background: white;
      text-decoration: none;
      color: inherit;
      transition: all 0.2s;
    }
    
    .link-card-link:hover {
      border-color: #d1d5db;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      transform: translateY(-2px);
    }
    
    .link-card-image {
      aspect-ratio: 2/1;
      overflow: hidden;
      background: #f9fafb;
    }
    
    .link-card-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    
    .link-card-content {
      padding: 12px;
    }
    
    .link-card-header {
      display: flex;
      align-items: flex-start;
      gap: 8px;
    }
    
    .link-card-favicon {
      width: 16px;
      height: 16px;
      border-radius: 2px;
      flex-shrink: 0;
      margin-top: 2px;
    }
    
    .link-card-favicon-placeholder {
      width: 16px;
      height: 16px;
      background: #f3f4f6;
      border-radius: 2px;
      flex-shrink: 0;
      margin-top: 2px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 10px;
    }
    
    .link-card-meta {
      flex: 1;
      min-width: 0;
    }
    
    .link-card-title {
      font-weight: 600;
      font-size: 14px;
      line-height: 1.4;
      color: #1f2937;
      margin-bottom: 4px;
      overflow: hidden;
      text-overflow: ellipsis;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
    }
    
    .link-card-description {
      font-size: 12px;
      line-height: 1.4;
      color: #6b7280;
      margin-bottom: 4px;
      overflow: hidden;
      text-overflow: ellipsis;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
    }
    
    .link-card-site {
      font-size: 11px;
      color: #9ca3af;
      display: flex;
      align-items: center;
      gap: 4px;
    }
    
    /* „É≠„Éº„Éá„Ç£„É≥„Ç∞Áä∂ÊÖã */
    .link-card-preview.loading .link-card-loading {
      display: flex;
      align-items: center;
      gap: 12px;
      padding: 16px;
      border: 1px solid #e5e7eb;
      border-radius: 8px;
      background: #f9fafb;
    }
    
    .loading-spinner-small {
      width: 20px;
      height: 20px;
      border: 2px solid #e5e7eb;
      border-top: 2px solid #3b82f6;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    .loading-content {
      flex: 1;
    }
    
    .loading-title {
      font-size: 14px;
      font-weight: 500;
      color: #6b7280;
      margin-bottom: 2px;
    }
    
    .loading-url {
      font-size: 12px;
      color: #9ca3af;
    }
    
    /* „Ç®„É©„ÉºÁä∂ÊÖã */
    .link-card.error {
      margin: 16px 0;
      max-width: 600px;
    }
    
    .link-card-error {
      display: flex;
      align-items: flex-start;
      gap: 12px;
      padding: 16px;
      border: 1px solid #fecaca;
      border-radius: 8px;
      background: #fef2f2;
    }
    
    .error-icon {
      font-size: 20px;
      flex-shrink: 0;
    }
    
    .error-title {
      font-size: 14px;
      font-weight: 600;
      color: #dc2626;
      margin-bottom: 4px;
    }
    
    .error-message {
      font-size: 13px;
      color: #991b1b;
      margin-bottom: 4px;
    }
    
    .error-url {
      font-size: 11px;
      color: #7f1d1d;
      font-family: monospace;
      word-break: break-all;
    }
  </style>
</head>
<body>
  <!-- Toast notification container -->
  <div id="toast-container" class="toast-container"></div>
  
  <!-- Loading overlay -->
  <div id="loading-overlay" class="loading-overlay">
    <div class="loading-spinner">
      <div class="spinner"></div>
      <span id="loading-text">Âá¶ÁêÜ‰∏≠...</span>
    </div>
  </div>
  
  <!-- URLÂÖ•Âäõ„ÉÄ„Ç§„Ç¢„É≠„Ç∞ -->
  <div id="url-dialog-overlay" class="url-dialog-overlay">
    <div class="url-dialog">
      <h3>„É™„É≥„ÇØ„Ç´„Éº„ÉâÊåøÂÖ•</h3>
      <p>Web„Çµ„Ç§„Éà„ÅÆURL„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇËá™ÂãïÁöÑ„Å´„Çø„Ç§„Éà„É´„ÇÑË™¨Êòé„ÇíÂèñÂæó„Åó„Å¶„Ç´„Éº„ÉâÂΩ¢Âºè„ÅßË°®Á§∫„Åó„Åæ„Åô„ÄÇ</p>
      <input 
        type="url" 
        id="url-input" 
        placeholder="https://example.com" 
        autocomplete="url"
      />
      <div class="buttons">
        <button type="button" class="btn btn-secondary" id="url-cancel">
          „Ç≠„É£„É≥„Çª„É´
        </button>
        <button type="button" class="btn btn-primary" id="url-insert">
          ÊåøÂÖ•
        </button>
      </div>
    </div>
  </div>
  
  <div id="app">
    <!-- Header -->
    <header class="bg-white shadow-sm">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center h-16">
          <div class="flex items-center">
            <a href="/admin/blog/" class="text-blue-600 hover:text-blue-800 mr-4">
              ‚Üê Ë®ò‰∫ã‰∏ÄË¶ß
            </a>
            <h1 class="text-xl font-semibold text-gray-800" id="page-title">Ë®ò‰∫ãÁ∑®ÈõÜ</h1>
          </div>
          
          <div class="flex items-center space-x-4">
            <button 
              id="save-draft-button"
              class="bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700 transition duration-200"
            >
              ‰∏ãÊõ∏„Åç‰øùÂ≠ò
            </button>
            <button 
              id="publish-button"
              class="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition duration-200"
            >
              ÂÖ¨Èñã
            </button>
            <span id="user-email" class="text-gray-600 text-sm"></span>
            <button 
              id="logout-button"
              class="text-gray-600 hover:text-gray-800 text-sm px-3 py-2 rounded-md hover:bg-gray-100 transition duration-200"
            >
              „É≠„Ç∞„Ç¢„Ç¶„Éà
            </button>
          </div>
        </div>
      </div>
    </header>
    
    <!-- Loading State -->
    <div id="loading" class="max-w-4xl mx-auto py-12 text-center">
      <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      <p class="mt-2 text-gray-600">Ë™≠„ÅøËæº„Åø‰∏≠...</p>
    </div>
    
    <!-- Main Content -->
    <main id="editor-content" class="hidden max-w-4xl mx-auto py-6 px-4">
      <form id="post-form">
        
        <!-- Basic Information Section -->
        <div class="form-section">
          <div class="px-6 py-4 border-b border-gray-200">
            <h2 class="text-lg font-semibold text-gray-800">Âü∫Êú¨ÊÉÖÂ†±</h2>
          </div>
          <div class="p-6 space-y-6">
            
            <div>
              <label for="title" class="block text-sm font-medium text-gray-700 mb-2">
                „Çø„Ç§„Éà„É´ *
              </label>
              <input 
                type="text" 
                id="title" 
                name="title"
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Ë®ò‰∫ã„ÅÆ„Çø„Ç§„Éà„É´„ÇíÂÖ•Âäõ"
              />
            </div>
            
            <div>
              <label for="description" class="block text-sm font-medium text-gray-700 mb-2">
                Ë™¨Êòé *
              </label>
              <textarea 
                id="description" 
                name="description"
                rows="3"
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Ë®ò‰∫ã„ÅÆË™¨Êòé„ÇíÂÖ•ÂäõÔºàSEOÁî®Ôºâ"
              ></textarea>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label for="date" class="block text-sm font-medium text-gray-700 mb-2">
                  ÂÖ¨ÈñãÊó• *
                </label>
                <input 
                  type="date" 
                  id="date" 
                  name="date"
                  required
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>
              
              <div>
                <label for="image" class="block text-sm font-medium text-gray-700 mb-2">
                  Ë®ò‰∫ãÁîªÂÉè
                </label>
                
                <!-- Image Upload Area -->
                <div id="image-upload-area" class="space-y-4">
                  <!-- Upload Dropzone -->
                  <div 
                    id="upload-dropzone"
                    class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center cursor-pointer hover:border-gray-400 transition-colors"
                  >
                    <div id="upload-content">
                      <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                        <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                      </svg>
                      <p class="text-gray-600 mb-2">
                        <span class="font-medium text-blue-600 hover:text-blue-500">„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû</span>
                        „Åæ„Åü„ÅØ„Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„Éó
                      </p>
                      <p class="text-xs text-gray-500">PNG, JPG, GIF, WebP (ÊúÄÂ§ß5MB)</p>
                    </div>
                    
                    <!-- Upload Progress -->
                    <div id="upload-progress" class="hidden space-y-2">
                      <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
                      <div class="w-full bg-gray-200 rounded-full h-2">
                        <div id="progress-bar" class="bg-blue-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                      </div>
                      <p class="text-sm text-gray-600">„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ‰∏≠...</p>
                    </div>
                  </div>
                  
                  <!-- Image Preview -->
                  <div id="image-preview" class="hidden space-y-3">
                    <div class="relative inline-block">
                      <img id="preview-image" src="" alt="„Éó„É¨„Éì„É•„Éº" class="max-w-full h-auto max-h-64 rounded-lg shadow-sm">
                      <button 
                        type="button"
                        id="remove-image"
                        class="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600 transition-colors"
                        title="ÁîªÂÉè„ÇíÂâäÈô§"
                      >
                        <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                        </svg>
                      </button>
                    </div>
                    <div class="text-sm text-gray-600">
                      <p>‚úÖ „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂÆå‰∫Ü</p>
                    </div>
                  </div>
                  
                  <!-- Error Message -->
                  <div id="upload-error" class="hidden bg-red-50 border border-red-200 rounded-md p-3">
                    <div class="flex">
                      <div class="flex-shrink-0">
                        <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
                        </svg>
                      </div>
                      <div class="ml-3">
                        <p id="error-text" class="text-sm text-red-700"></p>
                      </div>
                    </div>
                  </div>
                </div>
                
                <!-- Hidden input for image URL -->
                <input 
                  type="hidden" 
                  id="image" 
                  name="image"
                />
              </div>
            </div>
          </div>
        </div>
        
        <!-- Metadata Section -->
        <div class="form-section">
          <div class="px-6 py-4 border-b border-gray-200">
            <h2 class="text-lg font-semibold text-gray-800">„É°„Çø„Éá„Éº„Çø</h2>
          </div>
          <div class="p-6 space-y-6">
            
            <div>
              <label for="authors" class="block text-sm font-medium text-gray-700 mb-2">
                ËëóËÄÖ *
              </label>
              <input 
                type="text" 
                id="authors" 
                name="authors"
                value="admin"
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="admin"
              />
              <p class="mt-1 text-xs text-gray-500">Ë§áÊï∞„ÅÆÂ†¥Âêà„ÅØ„Ç´„É≥„ÉûÂå∫Âàá„Çä</p>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label for="categories" class="block text-sm font-medium text-gray-700 mb-2">
                  „Ç´„ÉÜ„Ç¥„É™„Éº *
                </label>
                <select 
                  id="categories" 
                  name="categories"
                  multiple
                  required
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="„ÅØ„Åò„ÇÅ„Å¶„ÅÆÊñπ„Å∏">„ÅØ„Åò„ÇÅ„Å¶„ÅÆÊñπ„Å∏</option>
                  <option value="ÂÆüË∑µ„Éé„Ç¶„Éè„Ç¶">ÂÆüË∑µ„Éé„Ç¶„Éè„Ç¶</option>
                  <option value="ÊàêÂäü‰∫ã‰æã">ÊàêÂäü‰∫ã‰æã</option>
                  <option value="Ëæ≤Ê•≠„ÅÆÊú™Êù•„Å®ÊâãÊÆµ">Ëæ≤Ê•≠„ÅÆÊú™Êù•„Å®ÊâãÊÆµ</option>
                </select>
                <p class="mt-1 text-xs text-gray-500">Ctrl„Ç≠„Éº„ÇíÊäº„Åó„Å™„Åå„ÇâË§áÊï∞ÈÅ∏ÊäûÂèØ</p>
              </div>
              
              <div>
                <label for="tags" class="block text-sm font-medium text-gray-700 mb-2">
                  „Çø„Ç∞
                </label>
                <input 
                  type="text" 
                  id="tags" 
                  name="tags"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="„Çπ„Éû„Éº„ÉàËæ≤Ê•≠, IoT, „Çª„É≥„Çµ„Éº"
                />
                <p class="mt-1 text-xs text-gray-500">„Ç´„É≥„ÉûÂå∫Âàá„Çä„ÅßÂÖ•Âäõ</p>
              </div>
            </div>

            <!-- Draft Status -->
            <div class="mt-6">
              <div class="flex items-center">
                <input 
                  type="checkbox" 
                  id="draft" 
                  name="draft"
                  class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                />
                <label for="draft" class="ml-2 block text-sm text-gray-700">
                  ‰∏ãÊõ∏„Åç„Å®„Åó„Å¶‰øùÂ≠òÔºàÂÖ¨Èñã„Åó„Å™„ÅÑÔºâ
                </label>
              </div>
              <p class="mt-1 text-xs text-gray-500">„ÉÅ„Çß„ÉÉ„ÇØ„ÇíÂ§ñ„Åô„Å®Ë®ò‰∫ã„ÅåÂÖ¨Èñã„Åï„Çå„Åæ„Åô</p>
            </div>
            
          </div>
        </div>
        
        <!-- Content Editor Section -->
        <div class="form-section">
          <div class="px-6 py-4 border-b border-gray-200">
            <h2 class="text-lg font-semibold text-gray-800">Êú¨Êñá</h2>
          </div>
          <div class="p-6 editor-container">
            <textarea id="markdown-editor" style="min-height: 500px;"></textarea>
          </div>
        </div>
        
        <!-- Toast notifications will appear automatically -->
        
      </form>
    </main>
  </div>

  <!-- SimpleMDE JavaScript -->
  <script src="https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.js"></script>

  <!-- Firebase SDK v10 - Modular API -->
  <script type="module">
    import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js';
    import { getAuth, onAuthStateChanged, signOut } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-auth.js';
    import { getDatabase, ref, set, get, update, push } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-database.js';
    import { getStorage, ref as storageRef, uploadBytes, getDownloadURL, uploadBytesResumable } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-storage.js';
    
    // Wait for window.firebaseConfig to be available
    if (!window.firebaseConfig) {
      console.error('Firebase config not available from inline script');
      document.body.innerHTML = '<div style="padding: 2rem; text-align: center; color: red;">FirebaseË®≠ÂÆö„Ç®„É©„Éº: Ë®≠ÂÆö„ÅåÊ≠£„Åó„ÅèË™≠„ÅøËæº„Åæ„Çå„Åæ„Åõ„Çì„Åß„Åó„Åü</div>';
      throw new Error('Firebase config not loaded');
    }

    // Use firebaseConfig from global window object
    const config = window.firebaseConfig;

    // Validate config exists
    if (!config || !config.apiKey) {
      console.error('Firebase config not properly loaded from Astro');
      document.body.innerHTML = '<div style="padding: 2rem; text-align: center; color: red;">FirebaseË®≠ÂÆö„Ç®„É©„Éº: Áí∞Â¢ÉÂ§âÊï∞„ÅåÊ≠£„Åó„ÅèË™≠„ÅøËæº„Åæ„Çå„Åæ„Åõ„Çì„Åß„Åó„Åü</div>';
      throw new Error('Firebase config not loaded');
    }

    // Initialize Firebase
    const app = initializeApp(config);
    const auth = getAuth(app);
    const database = getDatabase(app, config.databaseURL);
    const storage = getStorage(app);

    console.log('Firebase initialized with modular API');

    // Global state
    let currentPostId = null;
    let simpleMDE = null;
    
    // DOM elements
    const loading = document.getElementById('loading');
    const editorContent = document.getElementById('editor-content');
    const pageTitle = document.getElementById('page-title');
    const userEmail = document.getElementById('user-email');
    const logoutButton = document.getElementById('logout-button');
    const saveDraftButton = document.getElementById('save-draft-button');
    const publishButton = document.getElementById('publish-button');
    const toastContainer = document.getElementById('toast-container');
    const loadingOverlay = document.getElementById('loading-overlay');
    const loadingText = document.getElementById('loading-text');
    const urlDialogOverlay = document.getElementById('url-dialog-overlay');
    const urlInput = document.getElementById('url-input');
    const urlCancelBtn = document.getElementById('url-cancel');
    const urlInsertBtn = document.getElementById('url-insert');

    // Form elements
    const titleInput = document.getElementById('title');
    const descriptionInput = document.getElementById('description');
    const dateInput = document.getElementById('date');
    const imageInput = document.getElementById('image');
    const authorsInput = document.getElementById('authors');
    const categoriesSelect = document.getElementById('categories');
    const tagsInput = document.getElementById('tags');

    // Image upload elements
    const uploadDropzone = document.getElementById('upload-dropzone');
    const uploadContent = document.getElementById('upload-content');
    const uploadProgress = document.getElementById('upload-progress');
    const progressBar = document.getElementById('progress-bar');
    const imagePreview = document.getElementById('image-preview');
    const previewImage = document.getElementById('preview-image');
    const removeImageBtn = document.getElementById('remove-image');
    const uploadError = document.getElementById('upload-error');
    const errorText = document.getElementById('error-text');

    // Auth check and initialization
    onAuthStateChanged(auth, (user) => {
      if (!user) {
        window.location.href = '/admin/';
        return;
      }
      
      userEmail.textContent = user.email;
      initializeEditor();
      initializeImageUpload();
    });

    // Initialize editor
    function initializeEditor() {
      // Set default date to today
      const today = new Date().toISOString().split('T')[0];
      dateInput.value = today;
      
      // Get post ID from URL if editing
      const urlParams = new URLSearchParams(window.location.search);
      currentPostId = urlParams.get('id');
      
      if (currentPostId) {
        pageTitle.textContent = 'Ë®ò‰∫ãÁ∑®ÈõÜ';
        loadPost(currentPostId);
      } else {
        pageTitle.textContent = 'Êñ∞Ë¶èË®ò‰∫ã‰ΩúÊàê';
        showEditor();
      }
    }

    // Load existing post
    async function loadPost(postId) {
      try {
        showInfo('Ë™≠„ÅøËæº„Åø‰∏≠', 'Ë®ò‰∫ã„Éá„Éº„Çø„ÇíÂèñÂæó„Åó„Å¶„ÅÑ„Åæ„Åô...');
        
        const postRef = ref(database, `cms/blog/${postId}`);
        const snapshot = await get(postRef);
        
        if (snapshot.exists()) {
          const post = snapshot.val();
          populateForm(post);
          showEditor();
          showSuccess('Ë™≠„ÅøËæº„ÅøÂÆå‰∫Ü', `Ë®ò‰∫ã„Äå${post.title}„Äç„ÇíÊ≠£Â∏∏„Å´Ë™≠„ÅøËæº„Åø„Åæ„Åó„Åü`);
        } else {
          showError('Ë®ò‰∫ã„Ç®„É©„Éº', 'ÊåáÂÆö„Åï„Çå„ÅüË®ò‰∫ã„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
        }
      } catch (error) {
        console.error('Error loading post:', error);
        showError('Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº', `Ë®ò‰∫ã„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message}`);
      }
    }

    // Populate form with post data
    function populateForm(post) {
      console.log('Populating form with post:', post);
      
      titleInput.value = post.title || '';
      descriptionInput.value = post.description || '';
      dateInput.value = post.date || '';
      imageInput.value = post.image || '';
      authorsInput.value = Array.isArray(post.authors) ? post.authors.join(', ') : post.authors || 'admin';
      tagsInput.value = Array.isArray(post.tags) ? post.tags.join(', ') : post.tags || '';
      
      // Set categories
      if (Array.isArray(post.categories)) {
        Array.from(categoriesSelect.options).forEach(option => {
          option.selected = post.categories.includes(option.value);
        });
      }
      
      // Show image preview if image exists
      if (post.image && post.image.trim()) {
        showImagePreview(post.image);
      }
      
      // Store the post body for later use when editor is ready
      window.pendingPostBody = post.body || '';
      console.log('Set pending post body:', window.pendingPostBody);
    }

    // Show editor
    function showEditor() {
      loading.classList.add('hidden');
      editorContent.classList.remove('hidden');
      
      // Initialize SimpleMDE
      if (window.SimpleMDE && !simpleMDE) {
        console.log('Initializing SimpleMDE...');
        
        // Get initial value from pending body or empty string
        const initialValue = window.pendingPostBody || '';
        console.log('Editor initial value:', initialValue);
        
        const textarea = document.getElementById('markdown-editor');
        textarea.value = initialValue;
        
        simpleMDE = new SimpleMDE({
          element: textarea,
          initialValue: initialValue,
          spellChecker: false,
          status: ['autosave', 'lines', 'words', 'cursor'],
          toolbar: [
            'bold', 'italic', 'heading', '|',
            'quote', 'unordered-list', 'ordered-list', '|',
            'link', 'image', {
              name: 'linkcard',
              action: function(editor) {
                insertLinkCard(editor);
              },
              className: 'fa fa-credit-card',
              title: '„É™„É≥„ÇØ„Ç´„Éº„ÉâÊåøÂÖ•'
            }, '|',
            'preview', 'fullscreen', '|',
            'guide'
          ],
          shortcuts: {
            togglePreview: 'Ctrl-P',
            toggleFullScreen: 'F11'
          },
          previewRender: function(plainText) {
            // „Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥„ÇíHTML„Å´Â§âÊèõ
            return window.markdownToHtml ? window.markdownToHtml(plainText) : this.parent.markdown(plainText);
          }
        });
        
        // „Ç®„Éá„Ç£„ÇøÂÜÖ„Åß„ÅÆ„Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„ÉóÊ©üËÉΩ„ÇíËøΩÂä†
        setTimeout(() => {
          if (simpleMDE) {
            setupEditorDragDrop();
          }
        }, 500);
        
        console.log('SimpleMDE initialized with content:', initialValue);
        
        // Clear pending body after setting
        window.pendingPostBody = null;
      }
    }

    // Event handlers
    logoutButton.addEventListener('click', () => {
      signOut(auth);
    });

    saveDraftButton.addEventListener('click', () => {
      savePost(true);
    });

    publishButton.addEventListener('click', () => {
      savePost(false);
    });

    // Save post
    async function savePost(isDraft) {
      // Show loading overlay
      showLoading(isDraft ? '‰∏ãÊõ∏„Åç„Çí‰øùÂ≠ò„Åó„Å¶„ÅÑ„Åæ„Åô...' : 'Ë®ò‰∫ã„ÇíÂÖ¨Èñã„Åó„Å¶„ÅÑ„Åæ„Åô...');
      
      try {
        const formData = getFormData();
        formData.draft = isDraft;
        
        if (!validateForm(formData)) {
          hideLoading();
          return;
        }
        
        const postData = {
          ...formData,
          updatedAt: new Date().toISOString()
        };
        
        let operationResult;
        
        if (currentPostId) {
          // Update existing post
          showInfo('Êõ¥Êñ∞‰∏≠', 'Ë®ò‰∫ã„Éá„Éº„Çø„ÇíÊõ¥Êñ∞„Åó„Å¶„ÅÑ„Åæ„Åô...');
          await update(ref(database, `cms/blog/${currentPostId}`), postData);
          operationResult = {
            type: 'update',
            isDraft,
            title: formData.title
          };
        } else {
          // Create new post
          showInfo('‰ΩúÊàê‰∏≠', 'Êñ∞„Åó„ÅÑË®ò‰∫ã„Çí‰ΩúÊàê„Åó„Å¶„ÅÑ„Åæ„Åô...');
          postData.createdAt = new Date().toISOString();
          postData.slug = generateSlug(formData.title);
          
          const newPostRef = push(ref(database, 'cms/blog'));
          await set(newPostRef, postData);
          
          currentPostId = newPostRef.key;
          const newUrl = new URL(window.location.href);
          newUrl.searchParams.set('id', currentPostId);
          history.replaceState({}, '', newUrl);
          
          pageTitle.textContent = 'Ë®ò‰∫ãÁ∑®ÈõÜ';
          operationResult = {
            type: 'create',
            isDraft,
            title: formData.title,
            slug: postData.slug
          };
        }
        
        hideLoading();
        
        // Show detailed success message
        const actionText = operationResult.type === 'create' ? '‰ΩúÊàê' : 'Êõ¥Êñ∞';
        const statusText = operationResult.isDraft ? '‰∏ãÊõ∏„Åç‰øùÂ≠ò' : 'ÂÖ¨Èñã';
        const title = `${actionText}ÂÆå‰∫Ü`;
        let message = `Ë®ò‰∫ã„Äå${operationResult.title}„Äç„Åå${statusText}„Åï„Çå„Åæ„Åó„Åü„ÄÇ`;
        
        if (!operationResult.isDraft && operationResult.type === 'create') {
          message += `\n„Çπ„É©„ÉÉ„Ç∞: ${operationResult.slug}`;
        }
        
        showSuccess(title, message);
        
        // Additional info for published posts
        if (!operationResult.isDraft) {
          setTimeout(() => {
            showInfo('ÂÖ¨ÈñãÂÆå‰∫Ü', 'Ë®ò‰∫ã„Åå„Çµ„Ç§„Éà„Å´ÂèçÊò†„Åï„Çå„Åæ„Åó„Åü„ÄÇÊï∞ÂàÜÂæå„Å´„Çµ„Ç§„Éà„ÅßÁ¢∫Ë™ç„Åß„Åç„Åæ„Åô„ÄÇ');
          }, 1000);
        }
        
      } catch (error) {
        console.error('Error saving post:', error);
        hideLoading();
        
        const actionText = currentPostId ? 'Êõ¥Êñ∞' : '‰ΩúÊàê';
        const statusText = isDraft ? '‰∏ãÊõ∏„Åç‰øùÂ≠ò' : 'ÂÖ¨Èñã';
        
        showError(
          `${actionText}„Ç®„É©„Éº`,
          `Ë®ò‰∫ã„ÅÆ${statusText}„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message}`
        );
        
        // Show additional troubleshooting info for Firebase errors
        if (error.code) {
          setTimeout(() => {
            showWarning('„Éà„É©„Éñ„É´„Ç∑„É•„Éº„ÉÜ„Ç£„É≥„Ç∞', 
              'FirebaseÊé•Á∂ö„Å´ÂïèÈ°å„Åå„ÅÇ„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
          }, 2000);
        }
      }
    }

    // Get form data
    function getFormData() {
      const selectedCategories = Array.from(categoriesSelect.selectedOptions).map(option => option.value);
      const tagsArray = tagsInput.value.split(',').map(tag => tag.trim()).filter(tag => tag);
      const authorsArray = authorsInput.value.split(',').map(author => author.trim()).filter(author => author);
      
      return {
        title: titleInput.value.trim(),
        description: descriptionInput.value.trim(),
        date: dateInput.value,
        image: imageInput.value.trim(),
        authors: authorsArray.length > 0 ? authorsArray : ['admin'],
        categories: selectedCategories,
        tags: tagsArray,
        body: getMarkdownContent()
      };
    }

    // Get markdown content from editor
    function getMarkdownContent() {
      if (simpleMDE) {
        const value = simpleMDE.value();
        console.log('Getting markdown content from SimpleMDE:', value);
        return value || '';
      }
      
      // Fallback: try to get from textarea
      const textarea = document.getElementById('markdown-editor');
      const fallbackValue = textarea ? textarea.value : '';
      console.log('Fallback markdown content:', fallbackValue);
      return fallbackValue;
    }

    // Validate form
    function validateForm(data) {
      const errors = [];
      
      if (!data.title) errors.push('„Çø„Ç§„Éà„É´„ÅØÂøÖÈ†à„Åß„Åô');
      if (!data.description) errors.push('Ë™¨Êòé„ÅØÂøÖÈ†à„Åß„Åô');
      if (!data.date) errors.push('ÂÖ¨ÈñãÊó•„ÅØÂøÖÈ†à„Åß„Åô');
      if (!data.body) errors.push('Êú¨Êñá„ÅØÂøÖÈ†à„Åß„Åô');
      if (data.categories.length === 0) errors.push('„Ç´„ÉÜ„Ç¥„É™„Éº„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
      
      if (errors.length > 0) {
        showError('ÂÖ•Âäõ„Ç®„É©„Éº', errors.join('\n'));
        
        // Highlight first error field
        if (!data.title) titleInput.focus();
        else if (!data.description) descriptionInput.focus();
        else if (!data.date) dateInput.focus();
        else if (!data.body && simpleMDE) simpleMDE.codemirror.focus();
        else if (data.categories.length === 0) categoriesSelect.focus();
        
        return false;
      }
      
      return true;
    }

    // Generate slug from title
    function generateSlug(title) {
      return title
        .toLowerCase()
        .replace(/[^\w\s-]/g, '')
        .replace(/\s+/g, '-')
        .replace(/-+/g, '-')
        .trim();
    }

    // Toast notification system
    function showToast(type, title, message, duration = 4000) {
      const toast = document.createElement('div');
      toast.className = `toast ${type}`;
      
      const icons = {
        success: '‚úì',
        error: '‚úó',
        info: 'i',
        warning: '!'
      };
      
      toast.innerHTML = `
        <div class="toast-icon">${icons[type] || 'i'}</div>
        <div class="toast-content">
          <div class="toast-title">${title}</div>
          <div class="toast-message">${message}</div>
        </div>
        <button class="toast-close" onclick="this.parentElement.remove()">
          <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
            <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>
          </svg>
        </button>
      `;
      
      toastContainer.appendChild(toast);
      
      // Trigger animation
      setTimeout(() => {
        toast.classList.add('show');
      }, 10);
      
      // Auto remove after duration
      setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => {
          if (toast.parentElement) {
            toast.remove();
          }
        }, 300);
      }, duration);
      
      return toast;
    }

    // Convenience functions
    function showSuccess(title, message) {
      return showToast('success', title, message);
    }
    
    function showError(title, message) {
      return showToast('error', title, message);
    }
    
    function showInfo(title, message) {
      return showToast('info', title, message);
    }
    
    function showWarning(title, message) {
      return showToast('warning', title, message);
    }
    
    // Loading overlay functions
    function showLoading(text = 'Âá¶ÁêÜ‰∏≠...') {
      loadingText.textContent = text;
      loadingOverlay.classList.add('show');
    }
    
    function hideLoading() {
      loadingOverlay.classList.remove('show');
    }

    // Image upload functionality
    function initializeImageUpload() {
      // Hidden file input for click upload
      const fileInput = document.createElement('input');
      fileInput.type = 'file';
      fileInput.accept = 'image/*';
      fileInput.style.display = 'none';
      document.body.appendChild(fileInput);

      // Click upload
      uploadDropzone.addEventListener('click', () => {
        if (!uploadProgress.classList.contains('hidden')) return; // Don't allow clicking during upload
        fileInput.click();
      });

      fileInput.addEventListener('change', (e) => {
        const files = e.target.files;
        if (files && files.length > 0) {
          handleFileUpload(files[0]);
        }
      });

      // Drag and drop functionality
      uploadDropzone.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadDropzone.classList.add('border-blue-400', 'bg-blue-50');
      });

      uploadDropzone.addEventListener('dragleave', (e) => {
        e.preventDefault();
        uploadDropzone.classList.remove('border-blue-400', 'bg-blue-50');
      });

      uploadDropzone.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadDropzone.classList.remove('border-blue-400', 'bg-blue-50');
        
        const files = e.dataTransfer.files;
        if (files && files.length > 0) {
          handleFileUpload(files[0]);
        }
      });

      // Remove image button
      removeImageBtn.addEventListener('click', () => {
        removeImage();
      });
    }

    async function handleFileUpload(file) {
      // Validate file type
      if (!file.type.startsWith('image/')) {
        showError('„Éï„Ç°„Ç§„É´„Ç®„É©„Éº', '„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åß„Åç„Çã„ÅÆ„ÅØÁîªÂÉè„Éï„Ç°„Ç§„É´ÔºàPNG, JPG, GIF, WebPÔºâ„ÅÆ„Åø„Åß„Åô');
        return;
      }

      // Validate file size (5MB)
      const maxSize = 5 * 1024 * 1024;
      if (file.size > maxSize) {
        showError('„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„Ç®„É©„Éº', `„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÅØ5MB‰ª•‰∏ã„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºàÁèæÂú®: ${(file.size / 1024 / 1024).toFixed(2)}MBÔºâ`);
        return;
      }
      
      // Show upload start notification
      showInfo('„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÈñãÂßã', `${file.name} „Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶„ÅÑ„Åæ„Åô...`);

      try {
        // Hide upload content and show progress
        uploadContent.classList.add('hidden');
        uploadProgress.classList.remove('hidden');
        uploadError.classList.add('hidden');

        // Generate unique filename
        const timestamp = Date.now();
        const randomString = Math.random().toString(36).substring(2);
        const fileExtension = file.name.split('.').pop();
        const fileName = `${timestamp}_${randomString}.${fileExtension}`;

        // Create storage reference
        const fileRef = storageRef(storage, `blog/${fileName}`);
        
        // Upload file with progress tracking
        const uploadTask = uploadBytesResumable(fileRef, file, {
          contentType: file.type,
          customMetadata: {
            originalName: file.name,
            uploadedAt: new Date().toISOString()
          }
        });

        // Track upload progress
        uploadTask.on('state_changed', 
          (snapshot) => {
            const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
            progressBar.style.width = progress + '%';
          },
          (error) => {
            console.error('Upload error:', error);
            showError('„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Ç®„É©„Éº', `ÁîªÂÉè„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message}`);
            resetUploadUI();
          },
          async () => {
            try {
              // Upload completed successfully, get download URL
              const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
              
              // Set the image URL in the hidden input
              imageInput.value = downloadURL;
              
              // Show preview
              showImagePreview(downloadURL);
              
              // Reset upload UI
              uploadContent.classList.remove('hidden');
              uploadProgress.classList.add('hidden');
              progressBar.style.width = '0%';
              
              // Show success notification
              showSuccess('„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂÆå‰∫Ü', `${file.name} „ÅåÊ≠£Â∏∏„Å´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åï„Çå„Åæ„Åó„Åü`);
              
            } catch (error) {
              console.error('Error getting download URL:', error);
              showError('URLÂèñÂæó„Ç®„É©„Éº', 'ÁîªÂÉèURL„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ');
              resetUploadUI();
            }
          }
        );

      } catch (error) {
        console.error('Upload error:', error);
        showError('„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Ç®„É©„Éº', `ÁîªÂÉè„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message}`);
        resetUploadUI();
      }
    }

    function showImagePreview(imageUrl) {
      previewImage.src = imageUrl;
      uploadDropzone.classList.add('hidden');
      imagePreview.classList.remove('hidden');
      uploadError.classList.add('hidden');
    }

    function removeImage() {
      imageInput.value = '';
      previewImage.src = '';
      imagePreview.classList.add('hidden');
      uploadDropzone.classList.remove('hidden');
      uploadError.classList.add('hidden');
      resetUploadUI();
      
      // Show removal notification
      showInfo('ÁîªÂÉèÂâäÈô§', 'Ë®ò‰∫ãÁîªÂÉè„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü');
    }

    function resetUploadUI() {
      uploadContent.classList.remove('hidden');
      uploadProgress.classList.add('hidden');
      progressBar.style.width = '0%';
      uploadError.classList.add('hidden');
    }
    
    // „Ç®„Éá„Ç£„ÇøÂÜÖ„Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„ÉóÊ©üËÉΩ
    function setupEditorDragDrop() {
      if (!simpleMDE || !simpleMDE.codemirror) return;
      
      const codemirror = simpleMDE.codemirror;
      const wrapper = codemirror.getWrapperElement();
      
      // „Éâ„É©„ÉÉ„Ç∞„Ç™„Éº„Éê„Éº
      wrapper.addEventListener('dragover', (e) => {
        e.preventDefault();
        e.stopPropagation();
        wrapper.classList.add('drag-over');
      });
      
      // „Éâ„É©„ÉÉ„Ç∞„É™„Éº„Éñ
      wrapper.addEventListener('dragleave', (e) => {
        e.preventDefault();
        e.stopPropagation();
        wrapper.classList.remove('drag-over');
      });
      
      // „Éâ„É≠„ÉÉ„Éó
      wrapper.addEventListener('drop', async (e) => {
        e.preventDefault();
        e.stopPropagation();
        wrapper.classList.remove('drag-over');
        
        const files = e.dataTransfer.files;
        if (files && files.length > 0) {
          const file = files[0];
          
          // ÁîªÂÉè„Éï„Ç°„Ç§„É´„Åã„ÉÅ„Çß„ÉÉ„ÇØ
          if (!file.type.startsWith('image/')) {
            showError('„Éï„Ç°„Ç§„É´„Ç®„É©„Éº', 'ÁîªÂÉè„Éï„Ç°„Ç§„É´„ÅÆ„Åø„Éâ„É≠„ÉÉ„Éó„Åß„Åç„Åæ„Åô');
            return;
          }
          
          try {
            // ÁîªÂÉè„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶URL„ÇíÂèñÂæó
            showInfo('„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ‰∏≠', `${file.name} „Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶„ÅÑ„Åæ„Åô...`);
            const imageUrl = await uploadImageAndGetUrl(file);
            
            // „Ç´„Éº„ÇΩ„É´‰ΩçÁΩÆ„Å´ÁîªÂÉè„ÅÆ„Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥„ÇíÊåøÂÖ•
            const cursor = codemirror.getCursor();
            const imageMarkdown = `![${file.name}](${imageUrl})`;
            codemirror.replaceRange(imageMarkdown, cursor);
            
            showSuccess('„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂÆå‰∫Ü', `ÁîªÂÉè„Åå„Ç®„Éá„Ç£„Çø„Å´ËøΩÂä†„Åï„Çå„Åæ„Åó„Åü`);
          } catch (error) {
            console.error('Image upload error:', error);
            showError('„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Ç®„É©„Éº', `ÁîªÂÉè„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message}`);
          }
        }
      });
    }
    
    // ÁîªÂÉè„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶URL„ÇíËøî„ÅôÈñ¢Êï∞
    async function uploadImageAndGetUrl(file) {
      // „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÉÅ„Çß„ÉÉ„ÇØ
      const maxSize = 5 * 1024 * 1024;
      if (file.size > maxSize) {
        throw new Error(`„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÅØ5MB‰ª•‰∏ã„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºàÁèæÂú®: ${(file.size / 1024 / 1024).toFixed(2)}MBÔºâ`);
      }
      
      // „É¶„Éã„Éº„ÇØ„Å™„Éï„Ç°„Ç§„É´Âêç„ÇíÁîüÊàê
      const timestamp = Date.now();
      const randomString = Math.random().toString(36).substring(2);
      const fileExtension = file.name.split('.').pop();
      const fileName = `blog/${timestamp}_${randomString}.${fileExtension}`;
      
      // Firebase Storage„Å´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
      const fileRef = storageRef(storage, fileName);
      const snapshot = await uploadBytes(fileRef, file, {
        contentType: file.type,
        customMetadata: {
          originalName: file.name,
          uploadedAt: new Date().toISOString()
        }
      });
      
      // „ÉÄ„Ç¶„É≥„É≠„Éº„ÉâURL„ÇíÂèñÂæó
      const downloadURL = await getDownloadURL(snapshot.ref);
      return downloadURL;
    }
    
    // „É™„É≥„ÇØ„Ç´„Éº„Éâ„É°„Çø„Éá„Éº„Çø„Ç≠„É£„ÉÉ„Ç∑„É•
    const linkCardCache = new Map();
    
    // „Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥„ÅÆ„Éó„É¨„Éì„É•„ÉºÂá¶ÁêÜ„ÇíÊîπÂñÑ
    window.markdownToHtml = function(markdown) {
      // ‰∏çÂÆåÂÖ®„Å™ÁîªÂÉèÂèÇÁÖß„ÇíÂâäÈô§„Åæ„Åü„ÅØ‰øÆÊ≠£
      let cleanedMarkdown = markdown
        // ‰∏çÂÆåÂÖ®„Å™ÁîªÂÉèÂèÇÁÖß„ÇíÂâäÈô§
        .replace(/!\[\]\(http:\/?\/?$/gm, '')
        .replace(/!\[\]\(http:\/?\)?/g, '')
        .replace(/!\[.*?\]\(http:\/?\/?$/gm, '')
        .replace(/!\[.*?\]\(\s*\)/g, '');
      
      // „É™„É≥„ÇØ„Ç´„Éº„ÉâË®òÊ≥ï„ÇíÂá¶ÁêÜ
      cleanedMarkdown = processLinkCards(cleanedMarkdown);
      
      // Âü∫Êú¨ÁöÑ„Å™„Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥„ÇíHTML„Å´Â§âÊèõ
      let html = cleanedMarkdown
        // Ë¶ãÂá∫„Åó
        .replace(/^### (.*$)/gm, '<h3>$1</h3>')
        .replace(/^## (.*$)/gm, '<h2>$1</h2>')
        .replace(/^# (.*$)/gm, '<h1>$1</h1>')
        // Â§™Â≠ó
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        // Êñú‰Ωì
        .replace(/\*(.*?)\*/g, '<em>$1</em>')
        // „É™„É≥„ÇØ
        .replace(/\[([^\]]+)\]\(([^)\s]+)\)/g, '<a href="$2" target="_blank">$1</a>')
        // ÁîªÂÉèÔºàÊ≠£„Åó„ÅÑURL„ÅÆ„ÅøÔºâ
        .replace(/!\[([^\]]*)\]\((https?:\/\/[^)\s]+)\)/g, '<img src="$2" alt="$1" style="max-width: 100%; height: auto; border-radius: 4px; margin: 8px 0; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">')
        // „Ç≥„Éº„Éâ„Éñ„É≠„ÉÉ„ÇØÔºà‰∏âÈáç„Éê„ÉÉ„ÇØ„ÇØ„Ç©„Éº„ÉàÔºâ
        .replace(/```([\w]*)\n?([\s\S]*?)```/g, '<pre><code class="language-$1">$2</code></pre>')
        // „Ç§„É≥„É©„Ç§„É≥„Ç≥„Éº„Éâ
        .replace(/`([^`]+)`/g, '<code style="background: #f3f4f6; padding: 2px 4px; border-radius: 3px; font-size: 0.9em;">$1</code>')
        // „É™„Çπ„ÉàÔºàÁï™Âè∑‰ªò„ÅçÔºâ
        .replace(/^\d+\.\s+(.*)$/gm, '<li>$1</li>')
        // „É™„Çπ„ÉàÔºàÁÆáÊù°Êõ∏„ÅçÔºâ
        .replace(/^[-*+]\s+(.*)$/gm, '<li>$1</li>')
        // Ê∞¥Âπ≥Á∑ö
        .replace(/^---$/gm, '<hr>')
        // ÊîπË°å„ÅÆÂá¶ÁêÜ
        .replace(/\n\n/g, '</p><p>')
        .replace(/\n/g, '<br>');
      
      // „É™„Çπ„Éà„ÇíÈÅ©Âàá„Å´„Ç∞„É´„Éº„ÉóÂåñ
      html = html.replace(/(<li>.*<\/li>)/gs, '<ul>$1</ul>');
      
      // ÊÆµËêΩ„ÅßÂõ≤„ÇÄ
      html = '<p>' + html + '</p>';
      
      // Á©∫„ÅÆÊÆµËêΩ„ÇíÂâäÈô§
      html = html.replace(/<p><\/p>/g, '');
      html = html.replace(/<p>(<h[1-6]>)/g, '$1');
      html = html.replace(/(<\/h[1-6]>)<\/p>/g, '$1');
      html = html.replace(/<p>(<ul>)/g, '$1');
      html = html.replace(/(<\/ul>)<\/p>/g, '$1');
      html = html.replace(/<p>(<hr>)<\/p>/g, '$1');
      html = html.replace(/<p>(<pre>)/g, '$1');
      html = html.replace(/(<\/pre>)<\/p>/g, '$1');
      
      return html;
    };
    
    // „É™„É≥„ÇØ„Ç´„Éº„ÉâË®òÊ≥ï„ÇíÂá¶ÁêÜ
    function processLinkCards(markdown) {
      const linkCardRegex = /\[linkcard:(https?:\/\/[^\]]+)\]/g;
      
      return markdown.replace(linkCardRegex, (match, url) => {
        // „Ç≠„É£„ÉÉ„Ç∑„É•„Çí„ÉÅ„Çß„ÉÉ„ÇØ
        if (linkCardCache.has(url)) {
          const data = linkCardCache.get(url);
          return generateLinkCardHtml(data);
        }
        
        // ÈùûÂêåÊúü„Åß„É°„Çø„Éá„Éº„Çø„ÇíÂèñÂæó
        fetchLinkCardData(url);
        
        // „É≠„Éº„Éá„Ç£„É≥„Ç∞Ë°®Á§∫„ÇíËøî„Åô
        return generateLoadingLinkCard(url);
      });
    }
    
    // „É™„É≥„ÇØ„Ç´„Éº„Éâ„Éá„Éº„Çø„ÇíÈùûÂêåÊúüÂèñÂæó
    async function fetchLinkCardData(url) {
      try {
        const response = await fetch('https://us-central1-agricultural-llc.cloudfunctions.net/api/link-preview', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ url })
        });
        
        const data = await response.json();
        
        if (response.ok) {
          // „Ç≠„É£„ÉÉ„Ç∑„É•„Å´‰øùÂ≠ò
          linkCardCache.set(url, data);
          
          // „Éó„É¨„Éì„É•„Éº„ÇíÊõ¥Êñ∞
          updatePreview();
        } else {
          // „Ç®„É©„Éº„Éá„Éº„Çø„Çí„Ç≠„É£„ÉÉ„Ç∑„É•
          linkCardCache.set(url, { error: true, url, message: data.error });
          updatePreview();
        }
      } catch (error) {
        // „Ç®„É©„Éº„Éá„Éº„Çø„Çí„Ç≠„É£„ÉÉ„Ç∑„É•
        linkCardCache.set(url, { error: true, url, message: '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº' });
        updatePreview();
      }
    }
    
    // „Éó„É¨„Éì„É•„Éº„ÇíÊõ¥Êñ∞
    function updatePreview() {
      if (simpleMDE && simpleMDE.isPreviewActive()) {
        // „Éó„É¨„Éì„É•„Éº„ÇíÂº∑Âà∂Êõ¥Êñ∞
        const currentContent = simpleMDE.value();
        const preview = document.querySelector('.editor-preview');
        if (preview) {
          preview.innerHTML = window.markdownToHtml(currentContent);
        }
      }
    }
    
    // „É™„É≥„ÇØ„Ç´„Éº„ÉâHTML„ÇíÁîüÊàê
    function generateLinkCardHtml(data) {
      if (data.error) {
        return `<div class="link-card error">
          <div class="link-card-error">
            <span class="error-icon">‚ö†Ô∏è</span>
            <div>
              <div class="error-title">„É™„É≥„ÇØ„Ç´„Éº„ÉâË™≠„ÅøËæº„Åø„Ç®„É©„Éº</div>
              <div class="error-message">${data.message}</div>
              <div class="error-url">${data.url}</div>
            </div>
          </div>
        </div>`;
      }
      
      const domain = new URL(data.url).hostname;
      const displayTitle = data.title || domain;
      const displayDescription = data.description || '';
      const displaySiteName = data.siteName || domain;
      
      return `<div class="link-card-preview">
        <a href="${data.url}" target="_blank" rel="noopener noreferrer" class="link-card-link">
          ${data.image ? `<div class="link-card-image">
            <img src="${data.image}" alt="${displayTitle}" loading="lazy" />
          </div>` : ''}
          <div class="link-card-content">
            <div class="link-card-header">
              ${data.favicon ? `<img src="${data.favicon}" class="link-card-favicon" alt="" />` : '<div class="link-card-favicon-placeholder">üîó</div>'}
              <div class="link-card-meta">
                <div class="link-card-title">${displayTitle}</div>
                ${displayDescription ? `<div class="link-card-description">${displayDescription}</div>` : ''}
                <div class="link-card-site">${displaySiteName}</div>
              </div>
            </div>
          </div>
        </a>
      </div>`;
    }
    
    // „É≠„Éº„Éá„Ç£„É≥„Ç∞‰∏≠„ÅÆ„É™„É≥„ÇØ„Ç´„Éº„Éâ„ÇíÁîüÊàê
    function generateLoadingLinkCard(url) {
      const domain = new URL(url).hostname;
      
      return `<div class="link-card-preview loading">
        <div class="link-card-loading">
          <div class="loading-spinner-small"></div>
          <div class="loading-content">
            <div class="loading-title">„É™„É≥„ÇØÊÉÖÂ†±„ÇíÂèñÂæó‰∏≠...</div>
            <div class="loading-url">${domain}</div>
          </div>
        </div>
      </div>`;
    }
    
    // „É™„É≥„ÇØ„Ç´„Éº„ÉâÊåøÂÖ•Èñ¢Êï∞
    function insertLinkCard(editor) {
      showUrlDialog();
    }
    
    // URL„ÉÄ„Ç§„Ç¢„É≠„Ç∞Ë°®Á§∫
    function showUrlDialog() {
      urlInput.value = '';
      urlDialogOverlay.classList.add('show');
      
      // „Éï„Ç©„Éº„Ç´„Çπ„ÇíË®≠ÂÆö
      setTimeout(() => {
        urlInput.focus();
      }, 300);
    }
    
    // URL„ÉÄ„Ç§„Ç¢„É≠„Ç∞ÈùûË°®Á§∫
    function hideUrlDialog() {
      urlDialogOverlay.classList.remove('show');
    }
    
    // „É™„É≥„ÇØ„Ç´„Éº„ÉâÊåøÂÖ•Âá¶ÁêÜ
    async function processLinkCardInsertion(url) {
      if (!url || !url.trim()) {
        showError('ÂÖ•Âäõ„Ç®„É©„Éº', 'URL„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
        return;
      }
      
      const trimmedUrl = url.trim();
      
      try {
        // URLÊ§úË®º
        if (!trimmedUrl.startsWith('http://') && !trimmedUrl.startsWith('https://')) {
          // http„Çí‰ªò„Åë„Å¶ÂÜçÊ§úË®º
          const testUrl = 'https://' + trimmedUrl;
          new URL(testUrl);
        } else {
          new URL(trimmedUrl);
        }
      } catch {
        showError('ÂÖ•Âäõ„Ç®„É©„Éº', 'Ê≠£„Åó„ÅÑURLÂΩ¢Âºè„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºà‰æã: https://example.comÔºâ');
        return;
      }
      
      // „ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÇíÈùûË°®Á§∫„Å´„Åó„Å¶„É≠„Éº„Éá„Ç£„É≥„Ç∞Ë°®Á§∫
      hideUrlDialog();
      showLoading('„É™„É≥„ÇØÊÉÖÂ†±„ÇíÂèñÂæó‰∏≠...');
      
      try {
        // API„Åß„É°„Çø„Éá„Éº„Çø„ÇíÂèñÂæó
        const response = await fetch('https://us-central1-agricultural-llc.cloudfunctions.net/api/link-preview', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ url: trimmedUrl })
        });
        
        const data = await response.json();
        
        if (!response.ok) {
          throw new Error(data.error || '„É™„É≥„ÇØ„Éó„É¨„Éì„É•„Éº„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
        }
        
        // SimpleMDE„Ç®„Éá„Ç£„Çø„Å´„É™„É≥„ÇØ„Ç´„Éº„Éâ„ÇíÊåøÂÖ•
        const cursor = simpleMDE.codemirror.getCursor();
        const linkCardMarkdown = `[linkcard:${data.url}]`;
        
        // Êñ∞„Åó„ÅÑË°å„ÅßÊåøÂÖ•
        simpleMDE.codemirror.replaceRange('\n' + linkCardMarkdown + '\n', cursor);
        
        hideLoading();
        showSuccess('ÊåøÂÖ•ÂÆå‰∫Ü', '„É™„É≥„ÇØ„Ç´„Éº„Éâ„ÅåËøΩÂä†„Åï„Çå„Åæ„Åó„Åü');
        
      } catch (error) {
        console.error('Link card error:', error);
        hideLoading();
        showError('ÂèñÂæó„Ç®„É©„Éº', `„É™„É≥„ÇØÊÉÖÂ†±„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message}`);
      }
    }
    
    // URL„ÉÄ„Ç§„Ç¢„É≠„Ç∞„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº
    urlCancelBtn.addEventListener('click', hideUrlDialog);
    
    urlInsertBtn.addEventListener('click', async () => {
      await processLinkCardInsertion(urlInput.value);
    });
    
    // Enter„Ç≠„Éº„Åß„ÇÇÊåøÂÖ•
    urlInput.addEventListener('keydown', async (e) => {
      if (e.key === 'Enter') {
        e.preventDefault();
        await processLinkCardInsertion(urlInput.value);
      } else if (e.key === 'Escape') {
        hideUrlDialog();
      }
    });
    
    // „Ç™„Éº„Éê„Éº„É¨„Ç§„ÇØ„É™„ÉÉ„ÇØ„ÅßÈñâ„Åò„Çã
    urlDialogOverlay.addEventListener('click', (e) => {
      if (e.target === urlDialogOverlay) {
        hideUrlDialog();
      }
    });
    
  </script>
</body>
</html>