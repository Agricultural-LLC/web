---
import BaseLayout from "@components/base/BaseLayout.astro";
import NewsCard from "@components/news/NewsCard.astro";
import { getFirebaseNewsEntries, getFirebaseNewsCategories } from "@lib/newsLoader";

const allNews = await getFirebaseNewsEntries();
const publishedNews = allNews.filter(news => !news.draft);

publishedNews.sort((a, b) => {
  if (a.priority !== b.priority) {
    return (b.priority || 0) - (a.priority || 0);
  }
  return new Date(b.date).getTime() - new Date(a.date).getTime();
});

const allCategories = await getFirebaseNewsCategories();

const itemsPerPage = 9;
const totalPages = Math.ceil(publishedNews.length / itemsPerPage);
---

<BaseLayout>
  <section class="py-16 min-h-screen">
    <div class="container">

      <nav class="mb-8" aria-label="パンくずリスト">
        <ol class="flex items-center space-x-2 text-sm text-gray-600">
          <li><a href="/" class="hover:text-purple-600 transition-colors">ホーム</a></li>
          <li><span class="mx-2">/</span></li>
          <li class="text-gray-900 font-medium">ニュース</li>
        </ol>
      </nav>

      <div class="row justify-center mb-10">
        <div class="md:col-10 lg:col-8 text-center">
          <h1 class="text-3xl lg:text-4xl font-bold text-gray-900 mb-4">ニュース</h1>
          <p class="text-lg text-gray-600">農業DXに関する最新情報をお届けします</p>
        </div>
      </div>

      {allCategories.length > 0 && (
        <div class="row justify-center mb-8">
          <div class="lg:col-10">
            <div class="flex flex-wrap justify-center gap-2" id="category-filters">
              <button
                data-category="all"
                class="category-filter active px-4 py-2 rounded-full text-sm font-medium transition-all duration-200 bg-purple-600 text-white"
              >
                すべて ({publishedNews.length})
              </button>
              {allCategories.map(category => {
                const count = publishedNews.filter(news => news.categories?.includes(category)).length;
                return (
                  <button
                    data-category={category}
                    class="category-filter px-4 py-2 rounded-full text-sm font-medium transition-all duration-200 bg-white text-gray-700 hover:bg-purple-100"
                  >
                    {category} ({count})
                  </button>
                );
              })}
            </div>
          </div>
        </div>
      )}

      <div class="row justify-center mb-4">
        <div class="lg:col-10">
          <div class="flex justify-between items-center mb-4">
            <p class="text-gray-600 text-sm">
              <span id="showing-count">{Math.min(itemsPerPage, publishedNews.length)}</span>件 / 全<span id="total-count">{publishedNews.length}</span>件を表示
            </p>
            <select id="sort-select" class="px-3 py-1 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-purple-500">
              <option value="date-desc">新しい順</option>
              <option value="date-asc">古い順</option>
              <option value="priority">優先度順</option>
              <option value="views">閲覧数順</option>
            </select>
          </div>
        </div>
      </div>

      {publishedNews.length > 0 ? (
        <>
          <div class="row justify-center" id="news-grid">
            <div class="lg:col-10">
              <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                {publishedNews.slice(0, itemsPerPage).map((news) => (
                  <div class="news-item flex justify-center"
                       data-categories={JSON.stringify(news.categories || [])}
                       data-date={news.date}
                       data-priority={news.priority || 0}
                       data-views={news.views || 0}>
                    <div class="w-full max-w-sm">
                      <NewsCard news={news} />
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {totalPages > 1 && (
            <div class="row justify-center">
              <div class="lg:col-10">
                <nav aria-label="ページネーション" class="flex justify-center">
                  <ul class="flex gap-2" id="pagination">
                    <li>
                      <button
                        class="pagination-btn pagination-prev px-3 py-2 rounded-md bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                        disabled
                      >
                        <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                        </svg>
                      </button>
                    </li>
                    {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (
                      <li>
                        <button
                          class={`pagination-btn px-4 py-2 rounded-md ${page === 1 ? 'bg-purple-600 text-white' : 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50'}`}
                          data-page={page}
                        >
                          {page}
                        </button>
                      </li>
                    ))}
                    <li>
                      <button
                        class={`pagination-btn pagination-next px-3 py-2 rounded-md bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 ${totalPages === 1 ? 'disabled:opacity-50 disabled:cursor-not-allowed' : ''}`}
                        disabled={totalPages === 1}
                      >
                        <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                        </svg>
                      </button>
                    </li>
                  </ul>
                </nav>
              </div>
            </div>
          )}
        </>
      ) : (
        <div class="row justify-center">
          <div class="lg:col-8">
            <div class="text-center py-16 bg-white/60 backdrop-blur-sm border border-purple-100/50 rounded-xl">
              <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z" />
              </svg>
              <p class="text-gray-500 mb-4">まだニュース記事がありません</p>
              <p class="text-sm text-gray-400">新しいニュースが追加されるまでお待ちください</p>
            </div>
          </div>
        </div>
      )}
    </div>
  </section>

  <script define:vars={{ publishedNews, itemsPerPage }}>
    const allNewsData = publishedNews;
    const perPage = itemsPerPage;
    let currentPage = 1;
    let currentCategory = 'all';
    let currentSort = 'date-desc';
    let filteredNews = [...allNewsData];

    function updateNewsList() {
      filteredNews = currentCategory === 'all'
        ? [...allNewsData]
        : allNewsData.filter(news => news.categories?.includes(currentCategory));

      switch (currentSort) {
        case 'date-asc':
          filteredNews.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
          break;
        case 'priority':
          filteredNews.sort((a, b) => (b.priority || 0) - (a.priority || 0));
          break;
        case 'views':
          filteredNews.sort((a, b) => (b.views || 0) - (a.views || 0));
          break;
        default:
          filteredNews.sort((a, b) => {
            if (a.priority !== b.priority) {
              return (b.priority || 0) - (a.priority || 0);
            }
            return new Date(b.date).getTime() - new Date(a.date).getTime();
          });
      }

      const startIndex = (currentPage - 1) * perPage;
      const endIndex = startIndex + perPage;
      const visibleNews = filteredNews.slice(startIndex, endIndex);

      const newsItems = document.querySelectorAll('.news-item');
      newsItems.forEach((item, index) => {
        if (index < visibleNews.length) {
          const news = visibleNews[index];
          item.style.display = '';
          const isVisible = news && allNewsData.includes(news);
          if (!isVisible) {
            item.style.display = 'none';
          }
        } else {
          item.style.display = 'none';
        }
      });

      document.getElementById('showing-count').textContent = Math.min(endIndex, filteredNews.length);
      document.getElementById('total-count').textContent = filteredNews.length;

      updatePagination();
    }

    function updatePagination() {
      const totalPages = Math.ceil(filteredNews.length / perPage);
      const pagination = document.getElementById('pagination');

      if (!pagination) return;

      const prevBtn = pagination.querySelector('.pagination-prev');
      const nextBtn = pagination.querySelector('.pagination-next');

      prevBtn.disabled = currentPage === 1;
      nextBtn.disabled = currentPage === totalPages || totalPages === 0;

      pagination.querySelectorAll('[data-page]').forEach(btn => {
        const page = parseInt(btn.dataset.page);
        if (page <= totalPages) {
          btn.style.display = '';
          if (page === currentPage) {
            btn.classList.add('bg-purple-600', 'text-white');
            btn.classList.remove('bg-white', 'text-gray-700', 'border', 'border-gray-300', 'hover:bg-gray-50');
          } else {
            btn.classList.remove('bg-purple-600', 'text-white');
            btn.classList.add('bg-white', 'text-gray-700', 'border', 'border-gray-300', 'hover:bg-gray-50');
          }
        } else {
          btn.style.display = 'none';
        }
      });
    }

    document.addEventListener('DOMContentLoaded', () => {
      const categoryFilters = document.querySelectorAll('.category-filter');
      categoryFilters.forEach(filter => {
        filter.addEventListener('click', () => {
          categoryFilters.forEach(f => {
            f.classList.remove('active', 'bg-purple-600', 'text-white');
            f.classList.add('bg-white', 'text-gray-700');
          });
          filter.classList.add('active', 'bg-purple-600', 'text-white');
          filter.classList.remove('bg-white', 'text-gray-700');

          currentCategory = filter.dataset.category;
          currentPage = 1;
          updateNewsList();
        });
      });

      const sortSelect = document.getElementById('sort-select');
      if (sortSelect) {
        sortSelect.addEventListener('change', () => {
          currentSort = sortSelect.value;
          updateNewsList();
        });
      }

      const pagination = document.getElementById('pagination');
      if (pagination) {
        pagination.addEventListener('click', (e) => {
          const btn = e.target.closest('.pagination-btn');
          if (!btn || btn.disabled) return;

          if (btn.classList.contains('pagination-prev')) {
            currentPage = Math.max(1, currentPage - 1);
          } else if (btn.classList.contains('pagination-next')) {
            const totalPages = Math.ceil(filteredNews.length / perPage);
            currentPage = Math.min(totalPages, currentPage + 1);
          } else if (btn.dataset.page) {
            currentPage = parseInt(btn.dataset.page);
          }

          updateNewsList();
          window.scrollTo({ top: 0, behavior: 'smooth' });
        });
      }
    });
  </script>
</BaseLayout>