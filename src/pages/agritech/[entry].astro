---
import EntryLayout from "@components/agritech/EntryLayout.astro";
import similerItems from "@lib/similarItems";
import type { BlogEntry } from "@/types";
import { getFirebaseBlogEntries, getFirebaseBlogEntry } from "@lib/firebaseLoader";

// SSG: Generate static pages for existing blog entries
export async function getStaticPaths() {
  const entries = await getFirebaseBlogEntries();
  const paths = entries.map((entry) => ({
    params: {
      entry: entry.slug, // スラッグを使用
    },
    props: { entry, entries },
  }));
  return paths;
}

const { entry, entries } = Astro.props;
const relatedEntries = similerItems(entry, entries, entry.id);

// Firebase config for client-side
const firebaseConfig = {
  apiKey: import.meta.env.PUBLIC_FIREBASE_API_KEY,
  authDomain: import.meta.env.PUBLIC_FIREBASE_AUTH_DOMAIN,
  databaseURL: import.meta.env.PUBLIC_FIREBASE_DATABASE_URL,
  projectId: import.meta.env.PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: import.meta.env.PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: import.meta.env.PUBLIC_FIREBASE_APP_ID
};
---

<EntryLayout entry={entry} relatedEntries={relatedEntries} />

<!-- Client-side script for dynamic content validation and 404 handling -->
<div id="not-found-message" class="hidden fixed inset-0 bg-white z-50">
  <div class="container mx-auto px-4 py-16">
    <div class="max-w-2xl mx-auto text-center">
      <div class="mb-8">
        <svg class="mx-auto h-24 w-24 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      </div>
      <h1 class="text-4xl font-bold text-gray-900 mb-4">記事が見つかりません</h1>
      <p class="text-lg text-gray-600 mb-8">
        お探しのブログ記事は削除されたか、URLが間違っている可能性があります。
      </p>
      <div class="space-x-4">
        <a href="/agritech/" class="inline-flex items-center gap-2 px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
          <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16l-4-4m0 0l4-4m-4 4h18" />
          </svg>
          ブログ一覧に戻る
        </a>
        <a href="/" class="inline-flex items-center gap-2 px-6 py-3 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-colors">
          ホームに戻る
        </a>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ firebaseConfig, entrySlug: Astro.params.entry }}>
  window.firebaseConfig = firebaseConfig;
  window.entrySlug = entrySlug;
</script>

<script type="module">
  import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js';
  import { getDatabase, ref, get } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-database.js';

  async function validateBlogEntry() {
    try {
      const config = window.firebaseConfig;
      const entrySlug = window.entrySlug;

      if (!config || !entrySlug) {
        console.error('Missing Firebase config or entry slug');
        return;
      }

      // Initialize Firebase
      const app = initializeApp(config);
      const database = getDatabase(app, config.databaseURL);

      // Get all blog entries
      const blogRef = ref(database, 'cms/blog');
      const snapshot = await get(blogRef);

      if (!snapshot.exists()) {
        console.log('No blog entries found');
        document.getElementById('not-found-message').classList.remove('hidden');
        return;
      }

      const allEntries = snapshot.val();

      // Find entry by slug
      const entryId = Object.keys(allEntries).find(key => {
        return allEntries[key].slug === entrySlug;
      });

      if (!entryId) {
        // Entry with this slug doesn't exist - show 404
        console.log('Blog entry not found in Firebase, showing 404');
        document.getElementById('not-found-message').classList.remove('hidden');
        return;
      }

      const entryData = allEntries[entryId];

      // Check if entry is published (not draft)
      if (entryData.draft === true) {
        console.log('Blog entry is draft, showing 404');
        document.getElementById('not-found-message').classList.remove('hidden');
        return;
      }

      console.log('Blog entry validated successfully');

    } catch (error) {
      console.error('Error validating blog entry:', error);
      // On error, don't show 404 - let the static content remain visible
    }
  }

  // Run validation when page loads
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', validateBlogEntry);
  } else {
    validateBlogEntry();
  }
</script>
