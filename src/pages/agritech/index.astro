---
import BaseLayout from "@components/base/BaseLayout.astro";
import agritechIcon from "@assets/blog/agritech.png";
import { Image } from "astro:assets";

const siteName = "農業合同会社 Webサイト";
const baseTitle = "農てっく!";
const baseDescription =
  "スマート農業やデジタル技術を活用した農業の最新情報をお届けします";

const firebaseConfig = {
  apiKey:
    import.meta.env.PUBLIC_FIREBASE_API_KEY ||
    "AIzaSyCkctZ3zzyHw0JEEf8w-wl_xVE-1lQLo7E",
  authDomain:
    import.meta.env.PUBLIC_FIREBASE_AUTH_DOMAIN ||
    "agricultural-llc.firebaseapp.com",
  databaseURL:
    import.meta.env.PUBLIC_FIREBASE_DATABASE_URL ||
    "https://agricultural-llc-default-rtdb.asia-southeast1.firebasedatabase.app",
  projectId:
    import.meta.env.PUBLIC_FIREBASE_PROJECT_ID || "agricultural-llc",
  storageBucket:
    import.meta.env.PUBLIC_FIREBASE_STORAGE_BUCKET ||
    "agricultural-llc.firebasestorage.app",
  messagingSenderId:
    import.meta.env.PUBLIC_FIREBASE_MESSAGING_SENDER_ID || "293681935404",
  appId:
    import.meta.env.PUBLIC_FIREBASE_APP_ID ||
    "1:293681935404:web:188089a29ff3da05490d89",
};
---

<BaseLayout title={`${baseTitle} | ${siteName}`} description={baseDescription}>
  <section class="section-sm">
    <div class="container">
      <div class="row">
        <div class="col-12 md:col-7 lg:col-8">
          <div class="glass rounded-lg p-8 text-center">
            <h1 class="text-3xl font-bold text-gray-900 dark:text-white">{baseTitle}</h1>
            <p class="mt-4 text-gray-600 dark:text-gray-300">{baseDescription}</p>
          </div>
        </div>
        <div class="hidden md:flex md:col-5 lg:col-4 items-center justify-center">
          <Image
            src={agritechIcon}
            alt="農てっく！アイコン"
            width={200}
            height={200}
            class="w-40 h-40 md:w-40 md:h-40 lg:w-60 lg:h-60 rounded-lg shadow-lg"
          />
        </div>
      </div>
    </div>
  </section>

  <section class="section" data-agritech-root>
    <div class="container">
      <div class="row w-full">
        <div class="col-12 lg:col-8">
          <div id="agri-loading" class="text-center py-12">
            <div class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-green-600"></div>
            <p class="mt-4 text-gray-600">記事を読み込み中...</p>
          </div>

          <div id="agri-list-view" class="hidden">
            <div class="flex flex-col gap-4 md:flex-row md:items-center md:justify-between mb-6">
              <p class="text-gray-600">
                <span id="agri-list-count">0</span>件の記事を掲載しています
              </p>
              <label class="inline-flex items-center gap-2 text-sm text-gray-600">
                並び替え:
                <select
                  id="agri-sort-select"
                  class="px-3 py-1 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-green-500"
                >
                  <option value="date-desc">新しい順</option>
                  <option value="date-asc">古い順</option>
                  <option value="title">タイトル順</option>
                </select>
              </label>
            </div>

            <div id="agri-active-filters" class="hidden mb-4 flex flex-wrap gap-2 text-sm"></div>
            <div id="agri-posts-list" class="space-y-6"></div>
            <nav aria-label="ページネーション" class="flex justify-center mt-10">
              <ul class="flex gap-2" id="agri-pagination"></ul>
            </nav>
          </div>

          <div id="agri-detail-view" class="hidden">
            <article id="agri-detail-article" class="glass rounded-lg p-6 md:p-10"></article>
            <aside id="agri-detail-toc" class="mt-10 hidden"></aside>
            <section id="agri-related" class="mt-16 hidden">
              <h2 class="text-2xl font-bold text-gray-900 mb-6 text-center">関連記事</h2>
              <div id="agri-related-list" class="grid md:grid-cols-2 gap-6"></div>
            </section>
            <div class="mt-12 flex justify-center">
              <a href="/agritech/" class="inline-flex items-center gap-2 text-green-600 hover:text-green-800 transition-colors">
                <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16l-4-4m0 0l4-4m-4 4h18" />
                </svg>
                一覧に戻る
              </a>
            </div>
          </div>

          <div id="agri-empty" class="hidden text-center py-16 bg-white/60 backdrop-blur-sm border border-green-100/50 rounded-xl">
            <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z" />
            </svg>
            <p class="text-gray-500 mb-4">まだ記事がありません</p>
            <p class="text-sm text-gray-400">新しい記事が追加されるまでお待ちください</p>
          </div>

          <div id="agri-not-found" class="hidden text-center py-16 bg-white/60 backdrop-blur-sm border border-green-100/50 rounded-xl">
            <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <p class="text-gray-500 mb-4">お探しの記事が見つかりませんでした</p>
            <p class="text-sm text-gray-400">URLをご確認いただくか、一覧に戻って再度お探しください</p>
            <div class="mt-6 flex justify-center gap-4">
              <a href="/agritech/" class="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">一覧へ戻る</a>
              <a href="/" class="px-6 py-3 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-colors">ホームへ戻る</a>
            </div>
          </div>
        </div>

        <div class="col-12 lg:col-4 mt-10 lg:mt-0 lg:pl-8">
          <aside id="agri-sidebar" class="glass rounded-lg p-6 sticky top-24">
            <h2 class="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
              <svg class="w-5 h-5 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6l4 2" />
              </svg>
              カテゴリー
            </h2>
            <div id="agri-categories" class="flex flex-wrap gap-2 mb-8"></div>

            <h2 class="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
              <svg class="w-5 h-5 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7h18M3 12h18M3 17h18" />
              </svg>
              タグ
            </h2>
            <div id="agri-tags" class="flex flex-wrap gap-2"></div>
          </aside>
        </div>
      </div>

      <noscript>
        <div class="mt-10 text-center py-16 bg-red-50 border border-red-200 rounded-xl">
          <p class="text-red-700 font-medium mb-2">JavaScriptが無効になっています</p>
          <p class="text-sm text-red-600">最新の記事を表示するには、ブラウザの設定でJavaScriptを有効にしてください。</p>
        </div>
      </noscript>
    </div>
  </section>
</BaseLayout>

<script
  type="module"
  define:vars={{ firebaseConfig, baseDescription, baseTitle, siteName }}
>
  import { initializeApp, getApps, getApp } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js";
  import { getDatabase, ref, get } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-database.js";
  import { marked } from "https://cdn.jsdelivr.net/npm/marked@11.1.1/lib/marked.esm.js";

  marked.setOptions({
    gfm: true,
    breaks: true,
    mangle: false,
    headerIds: false,
  });


  function createSlug(text) {
    const normalized = text?.toString().trim() ?? '';
    const base = normalized
      .toLowerCase()
      .replace(/\s+/g, '-')
      .replace(/[^\p{Letter}\p{Number}\-ー]/gu, '');
    return base || `section-${Math.random().toString(36).slice(2, 8)}`;
  }

  function markdownToHtml(markdown) {
    const html = marked.parse(markdown || '');
    const template = document.createElement('template');
    template.innerHTML = html;

    const slugCounts = new Map();
    template.content.querySelectorAll('h1, h2, h3, h4, h5, h6').forEach((heading) => {
      const baseSlug = createSlug(heading.textContent || '');
      const count = slugCounts.get(baseSlug) || 0;
      const finalSlug = count ? `${baseSlug}-${count}` : baseSlug;
      slugCounts.set(baseSlug, count + 1);
      heading.id = finalSlug;
    });

    return template.innerHTML;
  }

  function markdownToPlain(markdown) {
    const html = marked.parse(markdown || '');
    const template = document.createElement('template');
    template.innerHTML = html;
    const text = template.content.textContent || '';
    return text.replace(/\s+/g, ' ').trim();
  }

  function extractHeadingsFromMarkdown(markdown) {
    const headings = [];
    const regex = /^(#{1,6})\s+(.+)$/gm;
    const slugCounts = new Map();
    let match;
    while ((match = regex.exec(markdown || '')) !== null) {
      const depth = match[1].length;
      const textContent = match[2].trim();
      const baseSlug = createSlug(textContent);
      const count = slugCounts.get(baseSlug) || 0;
      const finalSlug = count ? `${baseSlug}-${count}` : baseSlug;
      slugCounts.set(baseSlug, count + 1);
      headings.push({ depth, text: textContent, slug: finalSlug });
    }
    return headings;
  }

  const firebaseApp = getApps().length ? getApp() : initializeApp(firebaseConfig);
  const database = getDatabase(firebaseApp, firebaseConfig.databaseURL || undefined);

  const ITEMS_PER_PAGE = 6;
  const RUNNER_KEY = "__agritechPageRunner";

  const state = {
    allEntries: [],
    filteredEntries: [],
    currentPage: 1,
    currentCategory: "all",
    currentTag: "all",
    currentSort: "date-desc",
  };

  let eventController = new AbortController();

  function resetState() {
    state.allEntries = [];
    state.filteredEntries = [];
    state.currentPage = 1;
    state.currentCategory = "all";
    state.currentTag = "all";
    state.currentSort = "date-desc";
  }

  function getRoot() {
    return document.querySelector('[data-agritech-root]');
  }

  function getElements() {
    return {
      loadingEl: document.getElementById("agri-loading"),
      listViewEl: document.getElementById("agri-list-view"),
      detailViewEl: document.getElementById("agri-detail-view"),
      emptyEl: document.getElementById("agri-empty"),
      notFoundEl: document.getElementById("agri-not-found"),
      listCountEl: document.getElementById("agri-list-count"),
      postsListEl: document.getElementById("agri-posts-list"),
      paginationEl: document.getElementById("agri-pagination"),
      sortSelectEl: document.getElementById("agri-sort-select"),
      activeFiltersEl: document.getElementById("agri-active-filters"),
      sidebarCategoriesEl: document.getElementById("agri-categories"),
      sidebarTagsEl: document.getElementById("agri-tags"),
      detailArticleEl: document.getElementById("agri-detail-article"),
      detailTocEl: document.getElementById("agri-detail-toc"),
      relatedEl: document.getElementById("agri-related"),
      relatedListEl: document.getElementById("agri-related-list"),
    };
  }

  function ensureMeta(name, content, property = false) {
    const selector = property ? `meta[property="${name}"]` : `meta[name="${name}"]`;
    let el = document.querySelector(selector);
    if (!el) {
      el = document.createElement("meta");
      if (property) {
        el.setAttribute("property", name);
      } else {
        el.setAttribute("name", name);
      }
      document.head.appendChild(el);
    }
    el.setAttribute("content", content);
  }

  function removeStructuredData() {
    document.querySelectorAll('script[data-agri-ld]').forEach((script) => script.remove());
  }

  function updateHeadForList(totalCount) {
    const title = `${baseTitle} | ${siteName}`;
    document.title = title;
    ensureMeta("description", baseDescription);
    ensureMeta("og:title", title, true);
    ensureMeta("og:description", `${baseDescription}（全${totalCount}件）`, true);
    ensureMeta("og:type", "website", true);
    ensureMeta("twitter:card", "summary_large_image");

    let canonical = document.querySelector('link[rel="canonical"]');
    if (!canonical) {
      canonical = document.createElement("link");
      canonical.setAttribute("rel", "canonical");
      document.head.appendChild(canonical);
    }
    canonical.setAttribute("href", `${window.location.origin}/agritech/`);

    removeStructuredData();
  }

  function updateHeadForDetail(entry, description) {
    const title = `${entry.title} | ${siteName}`;
    document.title = title;
    ensureMeta("description", description);
    ensureMeta("og:title", entry.title, true);
    ensureMeta("og:description", description, true);
    ensureMeta("og:type", "article", true);
    if (entry.image) {
      ensureMeta("og:image", entry.image, true);
      ensureMeta("twitter:image", entry.image);
    }
    ensureMeta("twitter:card", "summary_large_image");

    let canonical = document.querySelector('link[rel="canonical"]');
    if (!canonical) {
      canonical = document.createElement("link");
      canonical.setAttribute("rel", "canonical");
      document.head.appendChild(canonical);
    }
    canonical.setAttribute("href", `${window.location.origin}/agritech/${entry.slug || entry.id}/`);

    removeStructuredData();
    const primaryDate = entry.date ? new Date(entry.date).toISOString() : undefined;
    const jsonLd = {
      '@context': 'https://schema.org',
      '@type': 'Article',
      headline: entry.title,
      description,
      image: entry.image ? [entry.image] : undefined,
      datePublished: primaryDate,
      dateModified: entry.updatedAt ? new Date(entry.updatedAt).toISOString() : primaryDate,
      author: (entry.authors || []).map((name) => ({ '@type': 'Person', name })),
      publisher: {
        '@type': 'Organization',
        name: siteName,
        logo: {
          '@type': 'ImageObject',
          url: `${window.location.origin}/logo.png`,
        },
      },
      mainEntityOfPage: {
        '@type': 'WebPage',
        '@id': `${window.location.origin}/agritech/${entry.slug || entry.id}/`,
      },
    };

    const script = document.createElement("script");
    script.type = "application/ld+json";
    script.dataset.agriLd = "article";
    script.textContent = JSON.stringify(jsonLd, null, 2);
    document.head.appendChild(script);
  }

  function normalizeEntry(id, value) {
    if (!value || typeof value !== "object") return null;
    const ensureString = (input) => (typeof input === "string" ? input : input ? String(input) : "");
    const ensureArray = (input) => Array.isArray(input)
      ? input.filter((item) => item != null).map((item) => String(item))
      : input
        ? [String(input)]
        : [];

    return {
      id,
      slug: ensureString(value.slug) || id,
      title: ensureString(value.title),
      description: ensureString(value.description),
      body: ensureString(value.body),
      date: ensureString(value.date),
      image: ensureString(value.image),
      authors: ensureArray(value.authors),
      categories: ensureArray(value.categories),
      tags: ensureArray(value.tags),
      draft: Boolean(value.draft),
      updatedAt: ensureString(value.updatedAt),
    };
  }

  function toggleView(view) {
    const { loadingEl, listViewEl, detailViewEl, emptyEl, notFoundEl } = getElements();
    if (loadingEl) loadingEl.classList.toggle("hidden", view !== "loading");
    if (listViewEl) listViewEl.classList.toggle("hidden", view !== "list");
    if (detailViewEl) detailViewEl.classList.toggle("hidden", view !== "detail");
    if (emptyEl) emptyEl.classList.toggle("hidden", view !== "empty");
    if (notFoundEl) notFoundEl.classList.toggle("hidden", view !== "notFound");
  }

  function sortEntries(entries) {
    const sortKey = state.currentSort;
    return [...entries].sort((a, b) => {
      if (sortKey === "date-asc") {
        return new Date(a.date).getTime() - new Date(b.date).getTime();
      }
      if (sortKey === "title") {
        return (a.title || "").localeCompare(b.title || "", "ja");
      }
      return new Date(b.date).getTime() - new Date(a.date).getTime();
    });
  }

  function renderSidebar() {
    const { sidebarCategoriesEl, sidebarTagsEl } = getElements();
    if (sidebarCategoriesEl) {
      const counts = new Map();
      state.allEntries.forEach((entry) => {
        (entry.categories || []).forEach((category) => {
          counts.set(category, (counts.get(category) || 0) + 1);
        });
      });
      const items = [...counts.entries()].sort((a, b) => a[0].localeCompare(b[0], "ja"));
      sidebarCategoriesEl.innerHTML = items.length
        ? items.map(([category, count]) => {
            const isActive = state.currentCategory === category;
            const baseClass = "inline-flex items-center justify-between gap-2 px-3 py-1 rounded-full text-sm border transition-colors";
            const activeClass = "bg-green-600 text-white border-green-600";
            const inactiveClass = "bg-white text-gray-700 border-green-200 hover:bg-green-50";
            const href = `/agritech/categories/${encodeURIComponent(category)}/`;
            return `<a href="${href}" class="${baseClass} ${isActive ? activeClass : inactiveClass}">
              <span>${category}</span>
              <span class="text-xs">${count}</span>
            </a>`;
          }).join("")
        : '<p class="text-sm text-gray-500">カテゴリーがまだありません</p>';
    }

    if (sidebarTagsEl) {
      const counts = new Map();
      state.allEntries.forEach((entry) => {
        (entry.tags || []).forEach((tag) => {
          counts.set(tag, (counts.get(tag) || 0) + 1);
        });
      });
      const items = [...counts.entries()].sort((a, b) => a[0].localeCompare(b[0], "ja"));
      sidebarTagsEl.innerHTML = items.length
        ? items.map(([tag, count]) => {
            const isActive = state.currentTag === tag;
            const baseClass = "inline-flex items-center gap-2 px-3 py-1 rounded-full text-sm border transition-colors";
            const activeClass = "bg-green-600 text-white border-green-600";
            const inactiveClass = "bg-white text-gray-700 border-green-200 hover:bg-green-50";
            const href = `/agritech/tags/${encodeURIComponent(tag)}/`;
            return `<a href="${href}" class="${baseClass} ${isActive ? activeClass : inactiveClass}">
              <span>#${tag}</span>
              <span class="text-xs">${count}</span>
            </a>`;
          }).join("")
        : '<p class="text-sm text-gray-500">タグがまだありません</p>';
    }
  }

  function renderActiveFilters() {
    const { activeFiltersEl } = getElements();
    if (!activeFiltersEl) return;

    const chips = [];
    if (state.currentCategory !== "all") {
      chips.push(`<a href="/agritech/" class="inline-flex items-center gap-1 px-3 py-1 rounded-full bg-green-100 text-green-800 text-sm hover:bg-green-200">
        カテゴリー: ${state.currentCategory}
        <span aria-hidden="true">×</span>
      </a>`);
    }
    if (state.currentTag !== "all") {
      chips.push(`<a href="/agritech/" class="inline-flex items-center gap-1 px-3 py-1 rounded-full bg-green-100 text-green-800 text-sm hover:bg-green-200">
        タグ: ${state.currentTag}
        <span aria-hidden="true">×</span>
      </a>`);
    }

    if (!chips.length) {
      activeFiltersEl.classList.add("hidden");
      activeFiltersEl.innerHTML = "";
      return;
    }

    activeFiltersEl.classList.remove("hidden");
    activeFiltersEl.innerHTML = chips.join("");
  }

  function applyFilters() {
    let entries = [...state.allEntries];
    if (state.currentCategory !== "all") {
      entries = entries.filter((entry) => entry.categories.includes(state.currentCategory));
    }
    if (state.currentTag !== "all") {
      entries = entries.filter((entry) => entry.tags.includes(state.currentTag));
    }
    return sortEntries(entries);
  }

  function renderPosts() {
    const { postsListEl, listCountEl } = getElements();
    if (!postsListEl || !listCountEl) return;

    listCountEl.textContent = String(state.filteredEntries.length);

    const totalPages = Math.max(1, Math.ceil(state.filteredEntries.length / ITEMS_PER_PAGE));
    if (state.currentPage > totalPages) {
      state.currentPage = totalPages;
    }

    const startIndex = (state.currentPage - 1) * ITEMS_PER_PAGE;
    const endIndex = startIndex + ITEMS_PER_PAGE;
    const visibleEntries = state.filteredEntries.slice(startIndex, endIndex);

    postsListEl.innerHTML = visibleEntries.map((entry) => {
      const href = `/agritech/${entry.slug}/`;
      const publishedDate = entry.date
        ? new Date(entry.date).toLocaleDateString('ja-JP')
        : '';
      const datetimeAttr = entry.date ? new Date(entry.date).toISOString() : '';
      return `
        <div class="mb-6">
          <a href="${href}" class="block glass rounded-lg overflow-hidden hover:shadow-lg transition-shadow">
            <article class="p-6">
              <h2 class="text-2xl font-bold mb-2 dark:text-white">${entry.title || ''}</h2>
              <p class="text-gray-600 dark:text-gray-300 mb-4">${entry.description || ''}</p>
              <div class="flex flex-wrap gap-2 text-sm text-gray-500">
                ${publishedDate ? `<span><time datetime="${datetimeAttr}">${publishedDate}</time></span>` : ''}
                ${(entry.categories || []).map((cat) => `<span class="px-2 py-1 bg-green-100 text-green-800 rounded">${cat}</span>`).join('')}
              </div>
            </article>
          </a>
        </div>
      `;
    }).join('');
  }

  function renderPagination() {
    const { paginationEl } = getElements();
    if (!paginationEl) return;

    const totalPages = Math.ceil(state.filteredEntries.length / ITEMS_PER_PAGE);
    if (totalPages <= 1) {
      paginationEl.innerHTML = '';
      return;
    }

    const pages = Array.from({ length: totalPages }, (_, index) => index + 1);
    paginationEl.innerHTML = `
      <li>
        <button class="pagination-prev px-3 py-2 rounded-md bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 ${state.currentPage === 1 ? 'opacity-50 cursor-not-allowed' : ''}" ${state.currentPage === 1 ? 'disabled' : ''}>
          <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
          </svg>
        </button>
      </li>
      ${pages.map((page) => `
        <li>
          <button data-page="${page}" class="pagination-btn px-4 py-2 rounded-md ${page === state.currentPage ? 'bg-green-600 text-white' : 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50'}">
            ${page}
          </button>
        </li>
      `).join('')}
      <li>
        <button class="pagination-next px-3 py-2 rounded-md bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 ${state.currentPage === totalPages ? 'opacity-50 cursor-not-allowed' : ''}" ${state.currentPage === totalPages ? 'disabled' : ''}>
          <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </button>
      </li>
    `;
  }

  function renderActiveAndSidebar() {
    renderSidebar();
    renderActiveFilters();
  }

  function renderListView() {
    renderActiveAndSidebar();
    state.filteredEntries = applyFilters();

    if (!state.filteredEntries.length) {
      const { listCountEl } = getElements();
      if (listCountEl) listCountEl.textContent = '0';
      toggleView('empty');
      return;
    }

    renderPosts();
    renderPagination();
    updateHeadForList(state.filteredEntries.length);

    const { sortSelectEl } = getElements();
    if (sortSelectEl) sortSelectEl.value = state.currentSort;

    toggleView('list');
  }

  function buildToc(headings) {
    const { detailTocEl } = getElements();
    if (!detailTocEl) return;

    const relevant = headings.filter((heading) => heading.depth <= 3);
    if (!relevant.length) {
      detailTocEl.classList.add('hidden');
      detailTocEl.innerHTML = '';
      return;
    }

    detailTocEl.classList.remove('hidden');
    detailTocEl.innerHTML = `
      <div class="glass rounded-lg p-6">
        <h2 class="text-lg font-semibold text-gray-900 mb-4">目次</h2>
        <ul class="space-y-2 text-sm text-gray-700">
          ${relevant.map((heading) => `
            <li style="margin-left: ${(heading.depth - 1) * 12}px">
              <a href="#${heading.slug}" class="hover:text-green-600">
                ${heading.text}
              </a>
            </li>
          `).join('')}
        </ul>
      </div>
    `;
  }

  function hydrateLinkCards() {
    const placeholders = document.querySelectorAll('.link-card-placeholder');
    placeholders.forEach(async (placeholder) => {
      const url = placeholder.getAttribute('data-url');
      if (!url) return;

      try {
        const response = await Promise.race([
          fetch('https://us-central1-agricultural-llc.cloudfunctions.net/api/link-preview', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Origin': window.location.origin,
            },
            body: JSON.stringify({ url }),
          }),
          new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), 3000)),
        ]);

        if (response.ok) {
          const data = await response.json();
          placeholder.outerHTML = createLinkCardHTML(data.url, data.title, data.description, data.image, data.siteName);
          return;
        }
      } catch (_) {
        // Ignore network failures, fall back to simple link.
      }

      const fallback = new URL(url, window.location.origin);
      placeholder.outerHTML = createLinkCardHTML(url, fallback.hostname, 'リンク先をご確認ください。', '', fallback.hostname);
    });
  }

  function createLinkCardHTML(url, title, description, image, siteName) {
    return `
      <a href="${url}" target="_blank" rel="noopener noreferrer"
        class="block border border-green-100 rounded-xl p-4 hover:border-green-300 transition-colors bg-white/70">
        <div class="flex gap-4 items-center">
          ${image ? `<img src="${image}" alt="${title || ''}" class="w-16 h-16 object-cover rounded-lg" />` : ''}
          <div>
            <p class="text-sm text-green-600 font-semibold">${siteName || ''}</p>
            <h3 class="text-base font-bold text-gray-900">${title || ''}</h3>
            <p class="text-sm text-gray-600 mt-1">${description || ''}</p>
          </div>
        </div>
      </a>
    `;
  }

  function renderRelated(entry) {
    const { relatedEl, relatedListEl } = getElements();
    if (!relatedEl || !relatedListEl) return;

    const related = state.allEntries
      .filter((item) => item.id !== entry.id)
      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
      .slice(0, 3);

    if (!related.length) {
      relatedEl.classList.add('hidden');
      relatedListEl.innerHTML = '';
      return;
    }

    relatedEl.classList.remove('hidden');
    relatedListEl.innerHTML = related.map((item) => {
      const href = `/agritech/${item.slug}/`;
      const publishedDate = item.date ? new Date(item.date).toLocaleDateString('ja-JP') : '';
      const datetimeAttr = item.date ? new Date(item.date).toISOString() : '';
      return `
        <article class="glass rounded-lg p-6 hover:shadow-lg transition-shadow">
          <a href="${href}" class="block">
            <h3 class="text-xl font-semibold text-gray-900 mb-3">${item.title || ''}</h3>
            <p class="text-gray-600 mb-4">${item.description || ''}</p>
            <div class="flex flex-wrap gap-2 text-sm text-gray-500">
              ${publishedDate ? `<span><time datetime="${datetimeAttr}">${publishedDate}</time></span>` : ''}
              ${(item.categories || []).map((cat) => `<span class="px-2 py-1 bg-green-100 text-green-800 rounded">${cat}</span>`).join('')}
            </div>
          </a>
        </article>
      `;
    }).join('');
  }

  function renderDetail(entry) {
    const { detailArticleEl } = getElements();
    if (!detailArticleEl) return;

    const formattedDate = entry.date
      ? new Date(entry.date).toLocaleDateString('ja-JP', {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
        })
      : '';
    const dateIso = entry.date ? new Date(entry.date).toISOString() : '';

    detailArticleEl.innerHTML = `
      <header class="mb-10">
        <h1 class="text-3xl lg:text-4xl font-bold text-gray-900 mb-6">${entry.title || ''}</h1>
        <div class="flex flex-wrap items-center gap-4 text-sm text-gray-600">
          ${formattedDate ? `<time datetime="${dateIso}">${formattedDate}</time>` : ''}
          ${(entry.categories || []).map((category) => `<span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800">${category}</span>`).join('')}
          ${(entry.tags || []).map((tag) => `<span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800">#${tag}</span>`).join('')}
        </div>
      </header>
      ${entry.image ? `
        <figure class="mb-10">
          <img
            src="${entry.image}"
            alt="${entry.title || ''}"
            class="w-full rounded-lg shadow-lg"
            loading="eager"
          />
        </figure>
      ` : ''}
      <div class="prose prose-lg max-w-none mb-10">
        <div>${markdownToHtml(entry.body || '')}</div>
      </div>
    `;

    buildToc(extractHeadingsFromMarkdown(entry.body || ''));
    hydrateLinkCards();
    renderRelated(entry);

    const description = entry.description || markdownToPlain(entry.body || '').slice(0, 140);
    updateHeadForDetail(entry, description);
    toggleView('detail');
  }

  function getRouteInfo() {
    const basePath = '/agritech';
    const path = window.location.pathname.replace(/\/+$/, '');
    let suffix = '';
    if (path.startsWith(basePath)) {
      suffix = decodeURIComponent(path.slice(basePath.length)).replace(/^\/+/, '');
    }

    if (!suffix) {
      return { mode: 'list' };
    }

    if (suffix.startsWith('categories/')) {
      const category = suffix.slice('categories/'.length).replace(/\/+$/, '');
      return { mode: 'category', value: category };
    }

    if (suffix.startsWith('tags/')) {
      const tag = suffix.slice('tags/'.length).replace(/\/+$/, '');
      return { mode: 'tag', value: tag };
    }

    if (suffix.startsWith('page/')) {
      const pageSegment = suffix.slice('page/'.length).replace(/\/+$/, '');
      const pageNumber = Number(pageSegment);
      return { mode: 'page', page: Number.isFinite(pageNumber) && pageNumber > 0 ? pageNumber : 1 };
    }

    return { mode: 'detail', slug: suffix };
  }

  async function loadEntries(routeInfo) {
    toggleView('loading');
    try {
      const snapshot = await get(ref(database, 'cms/blog'));
      if (!snapshot.exists()) {
        resetState();
        toggleView('empty');
        return;
      }

      const raw = snapshot.val();
      state.allEntries = Object.entries(raw)
        .map(([id, value]) => normalizeEntry(id, value))
        .filter((entry) => entry && !entry.draft);

      if (!state.allEntries.length) {
        resetState();
        toggleView('empty');
        return;
      }

      const url = new URL(window.location.href);
      const requestedSort = url.searchParams.get('sort');
      if (requestedSort && ['date-desc', 'date-asc', 'title'].includes(requestedSort)) {
        state.currentSort = requestedSort;
      } else {
        state.currentSort = 'date-desc';
      }

      if (routeInfo.mode === 'detail') {
        const entry = state.allEntries.find((item) => item.slug === routeInfo.slug || item.id === routeInfo.slug);
        if (!entry) {
          toggleView('notFound');
          return;
        }
        renderDetail(entry);
        return;
      }

      if (routeInfo.mode === 'category') {
        state.currentCategory = routeInfo.value || 'all';
        state.currentTag = 'all';
      } else if (routeInfo.mode === 'tag') {
        state.currentTag = routeInfo.value || 'all';
        state.currentCategory = 'all';
      } else {
        state.currentCategory = 'all';
        state.currentTag = 'all';
      }

      if (routeInfo.mode === 'page') {
        state.currentPage = routeInfo.page || 1;
      } else {
        state.currentPage = 1;
      }

      renderListView();
    } catch (error) {
      console.error('Failed to load agritech entries:', error);
      toggleView('notFound');
    }
  }

  function onSortChange(event) {
    const target = event.target;
    if (!(target instanceof HTMLSelectElement)) return;
    state.currentSort = target.value;
    state.currentPage = 1;

    const url = new URL(window.location.href);
    if (state.currentSort === 'date-desc') {
      url.searchParams.delete('sort');
    } else {
      url.searchParams.set('sort', state.currentSort);
    }
    history.replaceState({}, '', url.toString());

    renderListView();
  }

  function onPaginationClick(event) {
    const target = event.target;
    if (!(target instanceof HTMLElement)) return;
    const button = target.closest('button');
    if (!(button instanceof HTMLButtonElement) || button.disabled) return;

    if (button.classList.contains('pagination-prev')) {
      state.currentPage = Math.max(1, state.currentPage - 1);
    } else if (button.classList.contains('pagination-next')) {
      const totalPages = Math.ceil(state.filteredEntries.length / ITEMS_PER_PAGE);
      state.currentPage = Math.min(totalPages, state.currentPage + 1);
    } else if (button.dataset.page) {
      state.currentPage = Number(button.dataset.page);
    }

    renderListView();
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }

  function resetEventBindings() {
    eventController.abort();
    eventController = new AbortController();
  }

  function bindEvents() {
    resetEventBindings();
    const signal = eventController.signal;
    const { sortSelectEl, paginationEl } = getElements();
    sortSelectEl?.addEventListener('change', onSortChange, { signal });
    paginationEl?.addEventListener('click', onPaginationClick, { signal });
  }

  function start() {
    const root = getRoot();
    if (!root) {
      resetEventBindings();
      return;
    }

    const { loadingEl, listViewEl, detailViewEl } = getElements();
    if (!loadingEl || !listViewEl || !detailViewEl) {
      return;
    }

    resetState();
    bindEvents();
    loadEntries(getRouteInfo());
  }

  if (window[RUNNER_KEY]) {
    document.removeEventListener('astro:page-load', window[RUNNER_KEY]);
  }

  window[RUNNER_KEY] = () => start();

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', window[RUNNER_KEY], { once: true });
  } else {
    window[RUNNER_KEY]();
  }

  document.addEventListener('astro:page-load', window[RUNNER_KEY]);
</script>


<style>
  .glass {
    backdrop-filter: blur(12px);
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.85), rgba(245, 255, 245, 0.85));
    border: 1px solid rgba(56, 142, 60, 0.15);
  }
</style>
