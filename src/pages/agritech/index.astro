---
import BaseLayout from "@components/base/BaseLayout.astro";
import agritechIcon from "@assets/blog/agritech.png";
import { Image } from "astro:assets";

const siteName = "農業合同会社 Webサイト";
const baseTitle = "農てっく!";
const baseDescription =
  "スマート農業やデジタル技術を活用した農業の最新情報をお届けします";

const firebaseConfig = {
  apiKey:
    import.meta.env.PUBLIC_FIREBASE_API_KEY ||
    "AIzaSyCkctZ3zzyHw0JEEf8w-wl_xVE-1lQLo7E",
  authDomain:
    import.meta.env.PUBLIC_FIREBASE_AUTH_DOMAIN ||
    "agricultural-llc.firebaseapp.com",
  databaseURL:
    import.meta.env.PUBLIC_FIREBASE_DATABASE_URL ||
    "https://agricultural-llc-default-rtdb.asia-southeast1.firebasedatabase.app",
  projectId:
    import.meta.env.PUBLIC_FIREBASE_PROJECT_ID || "agricultural-llc",
  storageBucket:
    import.meta.env.PUBLIC_FIREBASE_STORAGE_BUCKET ||
    "agricultural-llc.firebasestorage.app",
  messagingSenderId:
    import.meta.env.PUBLIC_FIREBASE_MESSAGING_SENDER_ID || "293681935404",
  appId:
    import.meta.env.PUBLIC_FIREBASE_APP_ID ||
    "1:293681935404:web:188089a29ff3da05490d89",
};
---

<BaseLayout title={`${baseTitle} | ${siteName}`} description={baseDescription}>
  <section class="section-sm">
    <div class="container">
      <div class="row">
        <div class="col-12 md:col-7 lg:col-8">
          <div class="glass rounded-lg p-8 text-center">
            <h1 class="text-3xl font-bold text-gray-900 dark:text-white">{baseTitle}</h1>
            <p class="mt-4 text-gray-600 dark:text-gray-300">{baseDescription}</p>
          </div>
        </div>
        <div class="hidden md:flex md:col-5 lg:col-4 items-center justify-center">
          <Image
            src={agritechIcon}
            alt="農てっく！アイコン"
            width={200}
            height={200}
            class="w-40 h-40 md:w-40 md:h-40 lg:w-60 lg:h-60 rounded-lg shadow-lg"
          />
        </div>
      </div>
    </div>
  </section>

  <section class="section">
    <div class="container">
      <div class="row w-full">
        <div class="col-12 lg:col-8">
          <div id="agri-loading" class="text-center py-12">
            <div class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-green-600"></div>
            <p class="mt-4 text-gray-600">記事を読み込み中...</p>
          </div>

          <div id="agri-list-view" class="hidden">
            <div class="flex flex-col gap-4 md:flex-row md:items-center md:justify-between mb-6">
              <p class="text-gray-600">
                <span id="agri-list-count">0</span>件の記事を掲載しています
              </p>
              <label class="inline-flex items-center gap-2 text-sm text-gray-600">
                並び替え:
                <select
                  id="agri-sort-select"
                  class="px-3 py-1 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-green-500"
                >
                  <option value="date-desc">新しい順</option>
                  <option value="date-asc">古い順</option>
                  <option value="title">タイトル順</option>
                </select>
              </label>
            </div>

            <div id="agri-active-filters" class="hidden mb-4 flex flex-wrap gap-2 text-sm"></div>
            <div id="agri-posts-list" class="space-y-6"></div>
            <nav aria-label="ページネーション" class="flex justify-center mt-10">
              <ul class="flex gap-2" id="agri-pagination"></ul>
            </nav>
          </div>

          <div id="agri-detail-view" class="hidden">
            <article id="agri-detail-article" class="glass rounded-lg p-6 md:p-10"></article>
            <aside id="agri-detail-toc" class="mt-10 hidden"></aside>
            <section id="agri-related" class="mt-16 hidden">
              <h2 class="text-2xl font-bold text-gray-900 mb-6 text-center">関連記事</h2>
              <div id="agri-related-list" class="grid md:grid-cols-2 gap-6"></div>
            </section>
            <div class="mt-12 flex justify-center">
              <a href="/agritech/" class="inline-flex items-center gap-2 text-green-600 hover:text-green-800 transition-colors">
                <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16l-4-4m0 0l4-4m-4 4h18" />
                </svg>
                一覧に戻る
              </a>
            </div>
          </div>

          <div id="agri-empty" class="hidden text-center py-16 bg-white/60 backdrop-blur-sm border border-green-100/50 rounded-xl">
            <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z" />
            </svg>
            <p class="text-gray-500 mb-4">まだ記事がありません</p>
            <p class="text-sm text-gray-400">新しい記事が追加されるまでお待ちください</p>
          </div>

          <div id="agri-not-found" class="hidden text-center py-16 bg-white/60 backdrop-blur-sm border border-green-100/50 rounded-xl">
            <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <p class="text-gray-500 mb-4">お探しの記事が見つかりませんでした</p>
            <p class="text-sm text-gray-400">URLをご確認いただくか、一覧に戻って再度お探しください</p>
            <div class="mt-6 flex justify-center gap-4">
              <a href="/agritech/" class="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">一覧へ戻る</a>
              <a href="/" class="px-6 py-3 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-colors">ホームへ戻る</a>
            </div>
          </div>
        </div>

        <div class="col-12 lg:col-4 mt-10 lg:mt-0 lg:pl-8">
          <aside id="agri-sidebar" class="glass rounded-lg p-6 sticky top-24">
            <h2 class="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
              <svg class="w-5 h-5 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6l4 2" />
              </svg>
              カテゴリー
            </h2>
            <div id="agri-categories" class="flex flex-wrap gap-2 mb-8"></div>

            <h2 class="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
              <svg class="w-5 h-5 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7h18M3 12h18M3 17h18" />
              </svg>
              タグ
            </h2>
            <div id="agri-tags" class="flex flex-wrap gap-2"></div>
          </aside>
        </div>
      </div>

      <noscript>
        <div class="mt-10 text-center py-16 bg-red-50 border border-red-200 rounded-xl">
          <p class="text-red-700 font-medium mb-2">JavaScriptが無効になっています</p>
          <p class="text-sm text-red-600">最新の記事を表示するには、ブラウザの設定でJavaScriptを有効にしてください。</p>
        </div>
      </noscript>
    </div>
  </section>
</BaseLayout>

<script
  type="module"
  define:vars={{ firebaseConfig, baseDescription, baseTitle, siteName }}
>
  import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js';
  import { getDatabase, ref, get } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-database.js';
  import { marked } from 'https://cdn.jsdelivr.net/npm/marked@11.1.1/lib/marked.esm.js';

  marked.setOptions({
    gfm: true,
    breaks: true,
    mangle: false,
    headerIds: false,
  });

  function createSlug(text) {
    const normalized = text?.toString().trim() ?? '';
    const base = normalized
      .toLowerCase()
      .replace(/\s+/g, '-')
      .replace(/[^\p{Letter}\p{Number}\-ー]/gu, '');
    return base || `section-${Math.random().toString(36).slice(2, 8)}`;
  }

  function markdownToHtml(markdown) {
    const html = marked.parse(markdown || '');
    const template = document.createElement('template');
    template.innerHTML = html;

    const slugCounts = new Map();
    template.content.querySelectorAll('h1, h2, h3, h4, h5, h6').forEach((heading) => {
      const baseSlug = createSlug(heading.textContent || '');
      const count = slugCounts.get(baseSlug) || 0;
      const finalSlug = count ? `${baseSlug}-${count}` : baseSlug;
      slugCounts.set(baseSlug, count + 1);
      heading.id = finalSlug;
    });

    return template.innerHTML;
  }

  function markdownToPlain(markdown) {
    const html = marked.parse(markdown || '');
    const template = document.createElement('template');
    template.innerHTML = html;
    const text = template.content.textContent || '';
    return text.replace(/\s+/g, ' ').trim();
  }

  function extractHeadingsFromMarkdown(markdown) {
    const headings = [];
    const regex = /^(#{1,6})\s+(.+)$/gm;
    const slugCounts = new Map();
    let match;
    while ((match = regex.exec(markdown || '')) !== null) {
      const depth = match[1].length;
      const text = match[2].trim();
      const baseSlug = createSlug(text);
      const count = slugCounts.get(baseSlug) || 0;
      const finalSlug = count ? `${baseSlug}-${count}` : baseSlug;
      slugCounts.set(baseSlug, count + 1);
      headings.push({
        depth,
        text,
        slug: finalSlug,
      });
    }
    return headings;
  }

  const firebaseApp = initializeApp(firebaseConfig);
  const database = getDatabase(firebaseApp, firebaseConfig.databaseURL);

const loadingEl = document.getElementById('agri-loading');
  const listViewEl = document.getElementById('agri-list-view');
  const detailViewEl = document.getElementById('agri-detail-view');
  const emptyEl = document.getElementById('agri-empty');
  const notFoundEl = document.getElementById('agri-not-found');

  const listCountEl = document.getElementById('agri-list-count');
  const postsListEl = document.getElementById('agri-posts-list');
  const paginationEl = document.getElementById('agri-pagination');
  const sortSelectEl = document.getElementById('agri-sort-select');
  const activeFiltersEl = document.getElementById('agri-active-filters');

  const sidebarCategoriesEl = document.getElementById('agri-categories');
  const sidebarTagsEl = document.getElementById('agri-tags');

  const detailArticleEl = document.getElementById('agri-detail-article');
  const detailTocEl = document.getElementById('agri-detail-toc');
  const relatedEl = document.getElementById('agri-related');
  const relatedListEl = document.getElementById('agri-related-list');

  const itemsPerPage = 6;
  let allEntries = [];
let filteredEntries = [];
let currentPage = 1;
let currentCategory = 'all';
let currentTag = 'all';
let currentSort = 'date-desc';
let staticEventsBound = false;

function getRouteInfo() {
  const basePath = '/agritech';
  const path = window.location.pathname.replace(/\/+$/, '');
  let suffix = '';
  if (path.startsWith(basePath)) {
    suffix = decodeURIComponent(path.slice(basePath.length)).replace(/^\/+/, '');
  }

  if (!suffix) {
    return { mode: 'list' };
  }

  if (suffix.startsWith('categories/')) {
    const category = suffix.slice('categories/'.length).replace(/\/+$/, '');
    return { mode: 'category', value: category };
  }

  if (suffix.startsWith('tags/')) {
    const tag = suffix.slice('tags/'.length).replace(/\/+$/, '');
    return { mode: 'tag', value: tag };
  }

  if (suffix.startsWith('page/')) {
    const pageSegment = suffix.slice('page/'.length).replace(/\/+$/, '');
    const pageNumber = Number(pageSegment);
    return {
      mode: 'page',
      page: Number.isFinite(pageNumber) && pageNumber > 0 ? pageNumber : 1,
    };
  }

  return { mode: 'detail', slug: suffix.replace(/\/+$/, '') };
}
  let staticEventsBound = false;

  function toggleView(state) {
    const views = {
      loading: () => {
        loadingEl?.classList.remove('hidden');
        listViewEl?.classList.add('hidden');
        detailViewEl?.classList.add('hidden');
        emptyEl?.classList.add('hidden');
        notFoundEl?.classList.add('hidden');
      },
      list: () => {
        loadingEl?.classList.add('hidden');
        listViewEl?.classList.remove('hidden');
        detailViewEl?.classList.add('hidden');
        emptyEl?.classList.add('hidden');
        notFoundEl?.classList.add('hidden');
      },
      detail: () => {
        loadingEl?.classList.add('hidden');
        listViewEl?.classList.add('hidden');
        detailViewEl?.classList.remove('hidden');
        emptyEl?.classList.add('hidden');
        notFoundEl?.classList.add('hidden');
      },
      empty: () => {
        loadingEl?.classList.add('hidden');
        listViewEl?.classList.add('hidden');
        detailViewEl?.classList.add('hidden');
        emptyEl?.classList.remove('hidden');
        notFoundEl?.classList.add('hidden');
      },
      notFound: () => {
        loadingEl?.classList.add('hidden');
        listViewEl?.classList.add('hidden');
        detailViewEl?.classList.add('hidden');
        emptyEl?.classList.add('hidden');
        notFoundEl?.classList.remove('hidden');
      },
    };
    views[state]?.();
  }

  function ensureMeta(name, content, property = false) {
    const selector = property ? `meta[property="${name}"]` : `meta[name="${name}"]`;
    let el = document.querySelector(selector);
    if (!el) {
      el = document.createElement('meta');
      if (property) {
        el.setAttribute('property', name);
      } else {
        el.setAttribute('name', name);
      }
      document.head.appendChild(el);
    }
    el.setAttribute('content', content);
  }

  function removeStructuredData() {
    document.querySelectorAll('script[data-agri-ld]').forEach((script) => script.remove());
  }

  function updateHeadForList(totalCount) {
    const title = `${baseTitle} | ${siteName}`;
    document.title = title;
    ensureMeta('description', baseDescription);
    ensureMeta('og:title', title, true);
    ensureMeta('og:description', `${baseDescription}（全${totalCount}件）`, true);
    ensureMeta('og:type', 'website', true);
    ensureMeta('twitter:card', 'summary_large_image');

    let canonical = document.querySelector('link[rel="canonical"]');
    if (!canonical) {
      canonical = document.createElement('link');
      canonical.setAttribute('rel', 'canonical');
      document.head.appendChild(canonical);
    }
    canonical.setAttribute('href', `${window.location.origin}/agritech/`);

    removeStructuredData();
  }

  function updateHeadForDetail(entry) {
    const title = `${entry.title} | ${siteName}`;
    document.title = title;
    const description =
      entry.description || markdownToPlain(entry.body || '').slice(0, 140);
    ensureMeta('description', description);
    ensureMeta('og:title', entry.title, true);
    ensureMeta('og:description', description, true);
    ensureMeta('og:type', 'article', true);
    if (entry.image) {
      ensureMeta('og:image', entry.image, true);
      ensureMeta('twitter:image', entry.image);
    }
    ensureMeta('twitter:card', 'summary_large_image');

    let canonical = document.querySelector('link[rel="canonical"]');
    if (!canonical) {
      canonical = document.createElement('link');
      canonical.setAttribute('rel', 'canonical');
      document.head.appendChild(canonical);
    }
    canonical.setAttribute(
      'href',
      `${window.location.origin}/agritech/${entry.slug || entry.id}/`
    );

    removeStructuredData();
    const jsonLd = {
      '@context': 'https://schema.org',
      '@type': 'Article',
      headline: entry.title,
      description,
      image: entry.image ? [entry.image] : undefined,
      datePublished: entry.date,
      dateModified: entry.updatedAt || entry.date,
      author: Array.isArray(entry.authors)
        ? entry.authors.map((name) => ({ '@type': 'Person', name }))
        : entry.authors
          ? [{ '@type': 'Person', name: entry.authors }]
          : undefined,
      publisher: {
        '@type': 'Organization',
        name: siteName,
        logo: {
          '@type': 'ImageObject',
          url: `${window.location.origin}/logo.png`,
        },
      },
      mainEntityOfPage: {
        '@type': 'WebPage',
        '@id': `${window.location.origin}/agritech/${entry.slug || entry.id}/`,
      },
    };

    const script = document.createElement('script');
    script.type = 'application/ld+json';
    script.dataset.agriLd = 'article';
    script.textContent = JSON.stringify(jsonLd, null, 2);
    document.head.appendChild(script);
  }

  function sortEntries(entries) {
    if (currentSort === 'date-asc') {
      return entries.sort(
        (a, b) => new Date(a.date).getTime() - new Date(b.date).getTime()
      );
    }
    if (currentSort === 'title') {
      return entries.sort((a, b) =>
        (a.title || '').localeCompare(b.title || '', 'ja')
      );
    }
    return entries.sort(
      (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()
    );
  }

  function renderActiveFilters() {
    if (!activeFiltersEl) return;
    const filters = [];
    if (currentCategory !== 'all') {
      filters.push(`<button data-filter="category" class="px-3 py-1 bg-green-100 text-green-700 rounded-full">カテゴリー: ${currentCategory} ×</button>`);
    }
    if (currentTag !== 'all') {
      filters.push(`<button data-filter="tag" class="px-3 py-1 bg-green-100 text-green-700 rounded-full">タグ: ${currentTag} ×</button>`);
    }

    if (!filters.length) {
      activeFiltersEl.classList.add('hidden');
      activeFiltersEl.innerHTML = '';
      return;
    }

    activeFiltersEl.classList.remove('hidden');
    activeFiltersEl.innerHTML = filters.join('');
    activeFiltersEl.querySelectorAll('button').forEach((button) => {
      button.addEventListener('click', () => {
        if (button.dataset.filter === 'category') {
          currentCategory = 'all';
        } else if (button.dataset.filter === 'tag') {
          currentTag = 'all';
        }
        filteredEntries = applyFilters();
        currentPage = 1;
        renderList();
      });
    });
  }

  function applyFilters() {
    return sortEntries(
      allEntries.filter((entry) => {
        const categoryOk =
          currentCategory === 'all' ||
          (entry.categories || []).includes(currentCategory);
        const tagOk =
          currentTag === 'all' || (entry.tags || []).includes(currentTag);
        return categoryOk && tagOk;
      })
    );
  }

  function renderSidebar(categories, tags) {
    if (sidebarCategoriesEl) {
      sidebarCategoriesEl.innerHTML = categories
        .map(
          ({ name, count }) => `
            <button data-category="${name}"
              class="px-3 py-1 rounded-full border border-green-200 text-sm text-green-700 hover:bg-green-50 transition-colors">
              ${name} (${count})
            </button>
          `
        )
        .join('');
      sidebarCategoriesEl.querySelectorAll('button').forEach((button) =>
        button.addEventListener('click', () => {
          currentCategory =
            button.getAttribute('data-category') || 'all';
          currentPage = 1;
          filteredEntries = applyFilters();
          renderList();
        })
      );
    }

    if (sidebarTagsEl) {
      sidebarTagsEl.innerHTML = tags
        .map(
          ({ name, count }) => `
            <button data-tag="${name}"
              class="px-3 py-1 rounded-full bg-green-100 text-green-800 text-sm hover:bg-green-200 transition-colors">
              ${name} (${count})
            </button>
          `
        )
        .join('');
      sidebarTagsEl.querySelectorAll('button').forEach((button) =>
        button.addEventListener('click', () => {
          currentTag = button.getAttribute('data-tag') || 'all';
          currentPage = 1;
          filteredEntries = applyFilters();
          renderList();
        })
      );
    }
  }

  function renderList() {
    if (!postsListEl || !listCountEl || !paginationEl) return;

    renderActiveFilters();

    const total = filteredEntries.length;
    listCountEl.textContent = String(total);
    const totalPages = Math.ceil(total / itemsPerPage) || 1;
    const start = (currentPage - 1) * itemsPerPage;
    const end = start + itemsPerPage;
    const currentSlice = filteredEntries.slice(start, end);

    postsListEl.innerHTML = currentSlice
      .map((entry) => {
        const href = `/agritech/${entry.slug || entry.id}/`;
        const formattedDate = entry.date
          ? new Date(entry.date).toLocaleDateString('ja-JP')
          : '';
        return `
          <article class="glass rounded-lg p-6 hover:shadow-lg transition-shadow">
            <a href="${href}" class="block" data-internal-link="true">
              <h2 class="text-2xl font-bold text-gray-900 mb-3">${entry.title || ''}</h2>
              <p class="text-gray-600 mb-4">${entry.description || ''}</p>
              <div class="flex flex-wrap gap-2 text-sm text-gray-500">
                ${formattedDate ? `<span>${formattedDate}</span>` : ''}
                ${(entry.categories || []).map(
                  (cat) =>
                    `<span class="px-2 py-1 bg-green-100 text-green-800 rounded">${cat}</span>`
                ).join('')}
              </div>
            </a>
          </article>
        `;
      })
      .join('');

    paginationEl.innerHTML = '';
    if (totalPages > 1) {
      const prevDisabled = currentPage === 1 ? 'disabled' : '';
      const nextDisabled = currentPage === totalPages ? 'disabled' : '';
      paginationEl.innerHTML = `
        <li>
          <button ${prevDisabled}
            class="px-3 py-2 rounded-md bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 ${prevDisabled ? 'opacity-50 cursor-not-allowed' : ''}"
            data-action="prev">
            前へ
          </button>
        </li>
        ${Array.from({ length: totalPages }, (_, index) => index + 1)
          .map(
            (page) => `
              <li>
                <button data-page="${page}"
                  class="px-4 py-2 rounded-md ${page === currentPage ? 'bg-green-600 text-white' : 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50'}">
                  ${page}
                </button>
              </li>
            `
          )
          .join('')}
        <li>
          <button ${nextDisabled}
            class="px-3 py-2 rounded-md bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 ${nextDisabled ? 'opacity-50 cursor-not-allowed' : ''}"
            data-action="next">
            次へ
          </button>
        </li>
      `;

      paginationEl.querySelectorAll('button').forEach((button) => {
        button.addEventListener('click', () => {
          if (button.disabled) return;
          if (button.dataset.page) {
            currentPage = Number(button.dataset.page);
          } else if (button.dataset.action === 'prev') {
            currentPage = Math.max(1, currentPage - 1);
          } else if (button.dataset.action === 'next') {
            currentPage = Math.min(totalPages, currentPage + 1);
          }
          renderList();
          window.scrollTo({ top: 0, behavior: 'smooth' });
        });
      });
    }

    postsListEl.querySelectorAll('a[data-internal-link="true"]').forEach((anchor) => {
      anchor.addEventListener('click', (event) => {
        event.preventDefault();
        const href = anchor.getAttribute('href');
        if (href) {
          window.location.assign(href);
        }
      });
    });

    updateHeadForList(total);
    toggleView(total ? 'list' : 'empty');
  }

  function buildToc(headings) {
    if (!detailTocEl) return;
    const relevantHeadings = headings.filter((heading) => heading.depth <= 3);
    if (!relevantHeadings.length) {
      detailTocEl.classList.add('hidden');
      detailTocEl.innerHTML = '';
      return;
    }

    detailTocEl.classList.remove('hidden');
    detailTocEl.innerHTML = `
      <div class="glass rounded-lg p-6">
        <h2 class="text-lg font-semibold text-gray-900 mb-4">目次</h2>
        <ul class="space-y-2 text-sm text-gray-700">
          ${relevantHeadings
            .map(
              (heading) => `
                <li style="margin-left: ${(heading.depth - 1) * 12}px">
                  <a href="#${heading.slug}" class="hover:text-green-600">
                    ${heading.text}
                  </a>
                </li>
              `
            )
            .join('')}
        </ul>
      </div>
    `;
  }

  function hydrateLinkCards() {
    const placeholders = detailArticleEl?.querySelectorAll('.link-card-placeholder');
    if (!placeholders || !placeholders.length) return;

    placeholders.forEach(async (placeholder) => {
      const url = placeholder.getAttribute('data-url');
      if (!url) return;

      try {
        const response = await fetch('https://us-central1-agricultural-llc.cloudfunctions.net/api/link-preview', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Origin': window.location.origin,
          },
          body: JSON.stringify({ url }),
        });

        if (response.ok) {
          const data = await response.json();
          placeholder.outerHTML = createLinkCardHTML(data.url, data.title, data.description, data.image, data.siteName);
          return;
        }
      } catch (error) {
        console.warn('Link preview fetch failed, using fallback:', error);
      }

      const fallbackUrl = new URL(url, window.location.origin);
      placeholder.outerHTML = createLinkCardHTML(
        url,
        fallbackUrl.hostname,
        'リンク先をご確認ください。',
        '',
        fallbackUrl.hostname
      );
    });
  }

  function createLinkCardHTML(url, title, description, image, siteName) {
    return `
      <a href="${url}" target="_blank" rel="noopener noreferrer"
        class="block border border-green-100 rounded-xl p-4 hover:border-green-300 transition-colors bg-white/70">
        <div class="flex gap-4 items-center">
          ${image ? `<img src="${image}" alt="${title}" class="w-16 h-16 object-cover rounded-lg" />` : ''}
          <div>
            <p class="text-sm text-green-600 font-semibold">${siteName || ''}</p>
            <h3 class="text-base font-bold text-gray-900">${title || ''}</h3>
            <p class="text-sm text-gray-600 mt-1">${description || ''}</p>
          </div>
        </div>
      </a>
    `;
  }

  function renderDetail(entry) {
    if (!detailArticleEl) return;

    const formattedDate = entry.date
      ? new Date(entry.date).toLocaleDateString('ja-JP', {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
        })
      : '';

    const bodyHtml = markdownToHtml(entry.body || '');
    const headings = extractHeadingsFromMarkdown(entry.body || '');

    detailArticleEl.innerHTML = `
      <header class="mb-8">
        <div class="flex flex-wrap items-center gap-3 mb-4">
          ${(entry.categories || [])
            .map(
              (category) => `
                <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800">
                  ${category}
                </span>
              `
            )
            .join('')}
        </div>
        <h1 class="text-3xl font-bold text-gray-900 mb-4">${entry.title || ''}</h1>
        <div class="flex flex-wrap gap-4 text-sm text-gray-600">
          ${formattedDate ? `<span class="flex items-center gap-1">
            <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
            ${formattedDate}
          </span>` : ''}
          ${entry.authors?.length ? `<span class="flex items-center gap-1">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
            </svg>
            ${entry.authors.join(', ')}
          </span>` : ''}
        </div>
      </header>

      ${entry.image ? `
        <figure class="mb-8">
          <img src="${entry.image}" alt="${entry.title || ''}" class="w-full rounded-lg shadow-lg" loading="eager" />
        </figure>
      ` : ''}

      <section class="prose prose-lg max-w-none">
        <div>${bodyHtml}</div>
      </section>

      ${(entry.tags || []).length ? `
        <footer class="mt-10 flex flex-wrap gap-2">
          ${(entry.tags || [])
            .map((tag) => `<span class="px-3 py-1 bg-gray-100 text-gray-700 text-sm rounded-full">#${tag}</span>`)
            .join('')}
        </footer>
      ` : ''}
    `;

    buildToc(headings);
    hydrateLinkCards();
  }

  function renderRelated(currentEntry) {
    if (!relatedEl || !relatedListEl) return;
    const related = allEntries
      .filter((entry) => entry.id !== currentEntry.id)
      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
      .slice(0, 3);

    if (!related.length) {
      relatedEl.classList.add('hidden');
      relatedListEl.innerHTML = '';
      return;
    }

    relatedEl.classList.remove('hidden');
    relatedListEl.innerHTML = related
      .map((entry) => {
        const href = `/agritech/${entry.slug || entry.id}/`;
        const formattedDate = entry.date
          ? new Date(entry.date).toLocaleDateString('ja-JP')
          : '';
        return `
          <article class="glass rounded-lg p-6 hover:shadow-lg transition-shadow">
            <a href="${href}" class="block" data-internal-link="true">
              <h3 class="text-xl font-semibold text-gray-900 mb-3">${entry.title || ''}</h3>
              <p class="text-gray-600 mb-4">${entry.description || ''}</p>
              <div class="flex flex-wrap gap-2 text-sm text-gray-500">
                ${formattedDate ? `<span>${formattedDate}</span>` : ''}
                ${(entry.categories || []).map(
                  (cat) =>
                    `<span class="px-2 py-1 bg-green-100 text-green-800 rounded">${cat}</span>`
                ).join('')}
              </div>
            </a>
          </article>
        `;
      })
      .join('');

    relatedListEl.querySelectorAll('a[data-internal-link="true"]').forEach((anchor) => {
      anchor.addEventListener('click', (event) => {
        event.preventDefault();
        const href = anchor.getAttribute('href');
        if (href) {
          window.location.assign(href);
        }
      });
    });
  }

  async function loadEntries(routeInfo = getRouteInfo()) {
    toggleView('loading');
    try {
      const snapshot = await get(ref(database, 'cms/blog'));
      if (!snapshot.exists()) {
        toggleView('empty');
        return;
      }

      const raw = snapshot.val();
      allEntries = Object.entries(raw)
        .map(([id, value]) => (value && typeof value === 'object' ? { id, ...value } : null))
        .filter((entry) => entry && entry.draft !== true);

      if (!allEntries.length) {
        toggleView('empty');
        return;
      }

      allEntries = sortEntries(allEntries);

      const categoryCounts = new Map();
      const tagCounts = new Map();

      allEntries.forEach((entry) => {
        (entry.categories || []).forEach((cat) => {
          categoryCounts.set(cat, (categoryCounts.get(cat) || 0) + 1);
        });
        (entry.tags || []).forEach((tag) => {
          tagCounts.set(tag, (tagCounts.get(tag) || 0) + 1);
        });
      });

      renderSidebar(
        Array.from(categoryCounts.entries()).map(([name, count]) => ({ name, count })),
        Array.from(tagCounts.entries()).map(([name, count]) => ({ name, count }))
      );

      if (routeInfo.mode === 'detail') {
        const slug = (routeInfo.slug || '').replace(/\/+$/, '');
        const entry =
          allEntries.find((item) => item.slug === slug) ||
          allEntries.find((item) => item.id === slug);
        if (!entry) {
          toggleView('notFound');
          return;
        }

        updateHeadForDetail(entry);
        renderDetail(entry);
        renderRelated(entry);
        toggleView('detail');
        return;
      }

      currentCategory = 'all';
      currentTag = 'all';
      currentPage = 1;

      if (routeInfo.mode === 'category') {
        currentCategory = routeInfo.value || 'all';
      } else if (routeInfo.mode === 'tag') {
        currentTag = routeInfo.value || 'all';
      } else if (routeInfo.mode === 'page') {
        currentPage = routeInfo.page || 1;
      }

      filteredEntries = applyFilters();
      renderList();
    } catch (error) {
      console.error('Failed to load agritech entries:', error);
      toggleView('notFound');
    }
  }

  function bindStaticEvents() {
    if (staticEventsBound) return;
    staticEventsBound = true;
    sortSelectEl?.addEventListener('change', (event) => {
      const target = event.target;
      if (!(target instanceof HTMLSelectElement)) return;
      currentSort = target.value;
      filteredEntries = applyFilters();
      renderList();
    });
  }

  const startAgritechModule = () => {
    bindStaticEvents();
    loadEntries(getRouteInfo());
  };

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', startAgritechModule, { once: true });
  } else {
    startAgritechModule();
  }

  document.addEventListener('astro:page-load', startAgritechModule);
</script>

<style>
  .glass {
    backdrop-filter: blur(12px);
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.85), rgba(245, 255, 245, 0.85));
    border: 1px solid rgba(56, 142, 60, 0.15);
  }
</style>
